{"slug":"2018-06-apollo-graphql-code-generator","html":"<p><strong>In this article, I will give a short introduction to GraphQL and then we shall look at at Apollo Angular and the GraphQL code generator. We will combine the flexibility of Graphql with the safety of strongly typed TypeScript code that is consistent between server and client.</strong></p>\n<hr>\n\n<p>Last time we talked about my preferred way of doing REST:<br>via the OpenAPI description format (known as Swagger).\n<a href=\"/blog/2018-04-swagger-codegen\">We generated a REST api client for Angular</a> with the help of swagger-codegen / openapi-generator.\nBut there are drawbacks to REST - and GraphQL can address some of them.</p>\n<p>Depending on the use-case, I favour a different approach to read and change in my Angular application. Let&#39;s see what GraphQL is all about and then we should look at my preferred toolset.</p>\n<h2 id=\"hello-graphql\">Hello GraphQL</h2>\n<img src=\"logo-graphql.svg\" width=\"75%\">\n\n<p>One fundamental problem of a classical REST api is the amount of received data.\nSometimes we fetch too much data, so there is data in the response we don&#39;t use.\nOr we have the opposite, we do not have enough data with one call,\nwhich forces us to call a second resource for more.\nThis is called &quot;over-fetching&quot; and &quot;under-fetching&quot;.\nIn a perfect world, we would have exactly the right resources to serve the right data to our apps.\nIn a complex scenario this will lead to a huge and unmaintainable API.\nWe would have to offer our data in various shapes via different endpoints.</p>\n<p>Discover more about this RESTful resource <a href=\"https://api.angular.schule/swagger-ui/\">here</a>:</p>\n<ul>\n<li><strong><a href=\"https://api.angular.schule/books\">https://api.angular.schule/books</a></strong></li>\n</ul>\n<p>All right, a lot of books.\nLet&#39;s assume we are not interested in the thumbnail or the subtitle.\nBut we want to have the authors — but only their names!\nThat&#39;s tricky! How do we adjust this?\nActually, we haven&#39;t implemented such a feature in our RESTful API.\nThere isn&#39;t a way to do this.</p>\n<p>Soon we will define which objects and fields we want to receive - in our case books and authors.\nAnd this is basically a GraphQL query in nutshell.\nTake a look at the following api, which is supposed to return some books:</p>\n<ul>\n<li><strong><a href=\"https://api.angular.schule/graphql/\">https://api.angular.schule/graphql/</a></strong></li>\n</ul>\n<p>What you see is <a href=\"https://github.com/graphql/graphiql\">GraphiQL</a>.\nGraphiQL is an in-browser tool for exploring GraphQL queries and mutations.\nThe following query will read the same books:</p>\n<pre><code class=\"language-json\">{\n  <span class=\"hljs-keyword\">books</span> {\n    title\n    isbn\n    <span class=\"hljs-keyword\">authors</span> {\n      name\n    }\n  }\n}\n</code></pre>\n<p>The server will return a result like this:</p>\n<pre><code class=\"language-json\">{\n  <span class=\"hljs-string\">&quot;data&quot;</span>: {\n    <span class=\"hljs-string\">&quot;books&quot;</span>: [\n      {\n        <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;Angular&quot;</span>,\n        <span class=\"hljs-string\">&quot;isbn&quot;</span>: <span class=\"hljs-string\">&quot;9783864903571&quot;</span>,\n        <span class=\"hljs-string\">&quot;authors&quot;</span>: [\n          {\n            <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;Johannes Hoppe&quot;</span>\n          },\n          {\n            <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;Ferdinand Malcher&quot;</span>\n          },\n          {\n            <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;Danny Koppenhagen&quot;</span>\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>\n<p><strong>Eureka!</strong></p>\n<p>For your convenience, just click <a href=\"http://bit.ly/2t4dzTw\">this link</a> to place your first GraphQL query.\nGo ahead!\nPlay with the API and also request a <code>description</code> and a <code>rating</code>.\nThat&#39;s neat, isn&#39;t it?</p>\n<p>Up until now, we have been using a shorthand syntax where we omit both the query keyword and the query name.\nWe shouldn&#39;t do this in a real-life app.\nOn the one hand it is generally bad practice make the code ambiguous.\nOn the other hand we will also get in concrete tooling-trouble later on, because without a name it is hard to generate a type for that anonymous query (see <a href=\"https://github.com/dotansimha/graphql-code-generator/issues/372\">#372</a>).</p>\n<p>Let&#39;s fix this snippet to:</p>\n<pre><code><span class=\"hljs-attribute\">query</span> BooksAndAuthors {\n  <span class=\"hljs-section\">books</span> {\n    <span class=\"hljs-attribute\">title</span>\n    isbn\n    authors {\n      <span class=\"hljs-attribute\">name</span>\n    },\n    description,\n    rating\n  }\n}\n</code></pre>\n<p>As you have seen, the query has exactly the same shape as the result.\nThis is essential to GraphQL, because you always get back what you expect.\nHow do we know for sure that the authors return as an array?\nThat is another crucial aspect of GraphQL: <strong>schemas</strong>.\nSchemas are determined on the server.\nIt defines the objects that can be queried, as well as their exact types.\nOf course, we can query all aspects of the schema, too:</p>\n<pre><code class=\"language-json\">{\n  <span class=\"hljs-variable\">__type</span>(<span class=\"hljs-built_in\">name</span>: <span class=\"hljs-string\">&quot;Book&quot;</span>) {\n    kind\n    <span class=\"hljs-built_in\">name</span>\n    fields {\n      <span class=\"hljs-built_in\">name</span>\n      <span class=\"hljs-built_in\">type</span> {\n        kind\n        <span class=\"hljs-built_in\">name</span>\n        description  <span class=\"hljs-meta\"># TODO: we should add descriptions! ;-)</span>\n      }\n    }\n  }\n}\n</code></pre>\n<p><a href=\"http://bit.ly/2JGDmZl\">click here</a></p>\n<p>This is all we need to know to start with GraphQL.\nYou can learn more about the query language in <a href=\"https://graphql.org/learn/queries/\">the official documentation</a>. </p>\n<h2 id=\"querying-data-with-apollo-angular\">Querying data with Apollo Angular</h2>\n<img src=\"logo-apollo.svg\" width=\"75%\">\n\n<p>GraphQL has become very popular in recent times and there are a lot of implementations for various programming languages and frameworks.\nIn the Angular world, the <a href=\"https://www.apollographql.com/\">Apollo</a> library is quite popular. </p>\n<p>The <a href=\"https://www.apollographql.com/docs/angular/\">documentation</a> is well done, so we can keep the installation instructions short.\nTo get started with Apollo Angular, we first want to install the required packages from npm (multiple installs, for better readability).</p>\n<pre><code class=\"language-bash\">npm <span class=\"hljs-keyword\">install </span>apollo-angular\nnpm <span class=\"hljs-keyword\">install </span>apollo-angular-link-http\nnpm <span class=\"hljs-keyword\">install </span>apollo-client\nnpm <span class=\"hljs-keyword\">install </span>apollo-<span class=\"hljs-keyword\">cache-inmemory\n</span>npm <span class=\"hljs-keyword\">install </span>graphql-tag\nnpm <span class=\"hljs-keyword\">install </span>graphql\n</code></pre>\n<ul>\n<li><code>apollo-angular</code> is the Angular integration for the Apollo Client.</li>\n<li><code>apollo-angular-link-http</code> provides a network layer (Apollo Link).\nIt can be replaced with other link modules (e.g. GraphQL over WebSocket, read more in <a href=\"https://www.apollographql.com/docs/angular/basics/network-layer.html\">this article</a>).\nHere we configure the application-wide HTTP thingies like the URL to the endpoint. </li>\n<li><code>apollo-client</code> is the underlying GraphQL client.\nWe are going to use the integration for Angular but there are also different integration layers for React, Vue.js and more.</li>\n<li><code>apollo-cache-inmemory</code> is the recommended cache implementation for Apollo Client.</li>\n<li><code>graphql-tag</code> contains a parser to convert human-written GraphQL query strings into the standard GraphQL AST. We will use it for the <code>gql</code> tags later on.</li>\n<li><code>graphql</code> is the JavaScript reference implementation for GraphQL. <code>graphql-tag</code> requires this as a peer dependency.</li>\n</ul>\n<p>Quite a lot of packages, but you see the usage of any twice.\nIt&#39;s time to add three Modules to our application.\nWe need <code>HttpClientModule</code> (as always), <code>HttpLinkModule</code> (our API speaks simple HTTP) and the <code>ApolloModule</code> itself.\nThe necessary configuration can be done at the constructor of the <code>AppModule</code>, too.</p>\n<pre><code class=\"language-typescript\">import { ApolloModule, Apollo } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;apollo-angular&#x27;</span>;\nimport { HttpLinkModule, HttpLink } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;apollo-angular-link-http&#x27;</span>;\nimport { InMemoryCache } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;apollo-cache-inmemory&#x27;</span>;\n\n@<span class=\"hljs-title function_ invoke__\">NgModule</span>({\n  <span class=\"hljs-attr\">imports</span>: [\n    HttpClientModule,\n    HttpLinkModule,\n    ApolloModule\n  ],\n})\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppModule</span> </span>{\n  <span class=\"hljs-title function_ invoke__\">constructor</span>(<span class=\"hljs-attr\">apollo</span>: Apollo, <span class=\"hljs-attr\">httpLink</span>: HttpLink) {\n    apollo.<span class=\"hljs-title function_ invoke__\">create</span>({\n      <span class=\"hljs-attr\">link</span>: httpLink.<span class=\"hljs-title function_ invoke__\">create</span>({<span class=\"hljs-attr\">uri</span>: <span class=\"hljs-string\">&#x27;https://api.angular.schule/graphql&#x27;</span>}),\n      <span class=\"hljs-attr\">cache</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InMemoryCache</span>()\n    });\n  }\n}\n</code></pre>\n<p>The simplest way of preparing a query in TypeScript/JavaScript is to define it in a special notation.\nWe are using the <code>gql</code> tag that is provided by the <code>graphql-tag</code> library.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">import</span> gql <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;graphql-tag&#x27;</span>;\n\nbooksQuery = gql`<span class=\"language-graphql\">\n  <span class=\"hljs-keyword\">query</span> BookList <span class=\"hljs-punctuation\">{</span>\n    books <span class=\"hljs-punctuation\">{</span>\n      isbn\n      title\n      description,\n      rating\n      thumbnails <span class=\"hljs-punctuation\">{</span>\n        url\n      <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n`</span>;\n</code></pre>\n<p>For a quick start I recommend <code>Apollo.query</code>.\nIt returns an <code>Observable</code> that emits a result, just once.\nKnowing this, we do not have to unsubscribe — which makes the code a bit shorter compared to <code>Apollo.watchQuery </code>.\nFor advanced scenarios we can leverage <code>Apollo.watchQuery</code>, this method returns an object of type <code>QueryRef</code> that contains many useful methods to manipulate the watched query.\nJust to make you curious:</p>\n<ul>\n<li><code>querRef.startPolling</code></li>\n<li><code>querRef.stopPolling</code></li>\n<li><code>querRef.refetch</code></li>\n</ul>\n<p>You get your Observable via <code>querRef.valueChanges</code>. But keep in mind that you have to properly unsubscribe here.</p>\n<p>This is how we use <code>Apollo.query</code>:</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Apollo</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;apollo-angular&#x27;</span>;\n\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyComponent</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">OnInit</span>  {\n\n  <span class=\"hljs-attr\">books</span>: <span class=\"hljs-built_in\">any</span>[] = [];  <span class=\"hljs-comment\">// &lt;-- any❗️</span>\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">apollo</span>: <span class=\"hljs-title class_\">Apollo</span></span>) { }\n\n  <span class=\"hljs-title function_\">ngOnInit</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">store</span>\n      .<span class=\"hljs-title function_\">getAllViaGraphQL</span>()\n      .<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">books</span> =&gt;</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">books</span> = books);\n  }\n\n  <span class=\"hljs-title function_\">getAllViaGraphQL</span>(<span class=\"hljs-params\"></span>) {\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">apollo</span>.<span class=\"hljs-property\">query</span>&lt;<span class=\"hljs-built_in\">any</span>&gt;({  <span class=\"hljs-comment\">// &lt;-- any❗️</span>\n      <span class=\"hljs-attr\">query</span>: booksQuery,\n    })\n    .<span class=\"hljs-title function_\">pipe</span>(\n      <span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ data }</span>) =&gt;</span> data.<span class=\"hljs-property\">books</span>)\n    );\n  }\n}\n</code></pre>\n<p>Works like a charm, but you see two times the usage of <code>any</code>.\nThis is bad❗️\nObviously there are no TypeScript types out of the box.\nWe would have to define them on our own.\nThis is manual work where humans can make errors and where we can get out of sync with the model on the server very easily!\nSo we should generate the types by &quot;robots&quot; instead of with the help of the aforementioned GraphQL schema.\nOf course, other people have already done the hard work for us. </p>\n<h2 id=\"generating-types-with-graphql-code-generator\">Generating types with GraphQL code generator</h2>\n<img src=\"logo-graphql-code-generator.svg\" width=\"50%\">\n\n<p>All information we need is already in the GraphQL schema.\nWe are not going to use the <a href=\"https://github.com/apollographql/apollo-codegen\"><strong>Apollo</strong> GraphQL code generator</a> here.\nAt first glance it seems to be a perfect fit, since it is hosted under the same umbrella as Apollo Angular.\nBut after some evaluation I came to the conclusion that another code-generator (<a href=\"https://github.com/dotansimha/graphql-code-generator\"><strong>GraphQL Code Generator</strong></a>) is more suitable.\nI had two reasons for this decision:</p>\n<ol>\n<li>The generated code (TypeScript interfaces) is more readable and organised (grouped via namespaces).</li>\n<li>There is some flexible support for custom templates (with Handlebars) - This is a killer feature compared to &quot;Apollo GraphQL code generator&quot;. You can simply create your template and then compile it with your GraphQL schema and GraphQL operations and get a more customised result.</li>\n</ol>\n<p>If you are used to <code>swagger-codegen</code>, then you will experience a lot of similarities.\nAnd this is clearly the case.\nThe author wrote the code generator based on his experience with other robust code generators.\nI&#39;m going to repeat myself, but the most important point behind a solid code generator is the ability to change and extend the results.\nI was really wondering that his wasn&#39;t implemented for <code>apollo-codegen</code>.\nRead more about the story behind it <a href=\"https://medium.com/@dotansimha/graphql-code-generator-a34e3785e6fb\">at medium</a>.</p>\n<p>First we have to install the generator inside our existing Angular project:</p>\n<pre><code class=\"language-bash\">npm <span class=\"hljs-keyword\">install</span> --save-dev graphql-code-generator graphql-codegen-typescript-template\nnpm <span class=\"hljs-keyword\">install</span> graphql\n</code></pre>\n<p>In our case we can skip the dependency <code>graphql</code>, we already installed it together with Apollo.\nI added the installation of <code>graphql </code> in a separate line of code, since it is a &quot;devDependency&quot; like <code>graphql-code-generator</code>.\nBut it also has to be a dependency for <code>graphql-tag</code> (read above).\nAnyway, both options will work. </p>\n<p>Now we have a new command line tool with the name <code>gql-gen</code>.\nWe can either start it with <code>npx gql-gen [options] [documents ...]</code>...</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># command line usage</span>\nnpx gql-gen <span class=\"hljs-params\">--schema</span> https:<span class=\"hljs-string\">//api.angular.schule/graphql</span> <span class=\"hljs-params\">--template</span> graphql-codegen-typescript-template <span class=\"hljs-params\">--out</span> <span class=\"hljs-string\">./src/app/graphql-types.ts</span> <span class=\"hljs-string\">&quot;./src/**/*.ts&quot;</span>\n</code></pre>\n<p>...or execute it inside a run-script in the <code>package.json</code>:</p>\n<pre><code class=\"language-json\"><span class=\"hljs-comment\">// via package.json</span>\n{\n  <span class=\"hljs-string\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-string\">&quot;start&quot;</span>: <span class=\"hljs-string\">&quot;ng serve&quot;</span>,\n    <span class=\"hljs-string\">&quot;graphql-codegen&quot;</span>: <span class=\"hljs-string\">&quot;gql-gen --schema https://api.angular.schule/graphql --template graphql-codegen-typescript-template --out ./src/app/graphql-types.ts \\&quot;</span>./src<span class=\"hljs-comment\">/**/</span>*.ts\\<span class=\"hljs-string\">&quot;&quot;</span>\n  }\n}\n</code></pre>\n<p>For reusability I always prefer the last option.\nPlease pay an extra amount of attention to the double quotes for the file selector (<code>&quot;./src/**/*.ts&quot;</code>).\nIf you forget them, you won&#39;t notice an error but the codegen won&#39;t find your files.\nIt happens because the pattern <code>**</code> (for recursive lookup) gets resolved before <a href=\"https://www.npmjs.com/package/glob\">glob</a> receives it. (see more <a href=\"https://github.com/dotansimha/graphql-code-generator/issues/180#issuecomment-397086490\">here</a>)</p>\n<p>And this is the generated <code>Book</code> interface:</p>\n<pre><code class=\"language-typescript\">export <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-symbol\">Book</span> {\n  isbn: <span class=\"hljs-built_in\">string</span>;\n  title?: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span>;\n  subtitle?: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span>;\n  rating?: number | <span class=\"hljs-literal\">null</span>;\n  description?: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span>;\n  thumbnails?: (Thumbnail | <span class=\"hljs-literal\">null</span>)[] | <span class=\"hljs-literal\">null</span>;\n  authors?: (Author | <span class=\"hljs-literal\">null</span>)[] | <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>\n<p><strong>...but wait!</strong>  </p>\n<p>This is a full book, as described by the schema!\nLooking at the query, we are only interested in some of the properties and this interface is offering too much.\nProperties like <code>subtitle</code> are never delivered from the server and will evaluate to <code>undefined</code>.</p>\n<p>If we look at the generated file <code>graphql-types.ts</code> we will see that there are not only the types from the schema, but also types for the query <code>BookList</code>.\nThis is what we really want to use:</p>\n<pre><code class=\"language-typescripts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title class_\">BookList</span> {\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Variables</span> = {};\n\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Query</span> = {\n    __typename?: <span class=\"hljs-string\">&quot;Query&quot;</span>;\n    books?: (<span class=\"hljs-title class_\">Books</span> | <span class=\"hljs-literal\">null</span>)[] | <span class=\"hljs-literal\">null</span>;\n  };\n\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Books</span> = {\n    __typename?: <span class=\"hljs-string\">&quot;Book&quot;</span>;\n    <span class=\"hljs-attr\">isbn</span>: <span class=\"hljs-built_in\">string</span>;\n    title?: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span>;\n    description?: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span>;\n    rating?: <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-literal\">null</span>;\n    thumbnails?: (<span class=\"hljs-title class_\">Thumbnails</span> | <span class=\"hljs-literal\">null</span>)[] | <span class=\"hljs-literal\">null</span>;\n  };\n\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Thumbnails</span> = {\n    __typename?: <span class=\"hljs-string\">&quot;Thumbnail&quot;</span>;\n    url?: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span>;\n  };\n}\n</code></pre>\n<p>The namespace <code>BookList</code> contains everything to rewrite the Apollo query with strong types.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BookList</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../graphql-types&#x27;</span>;\n\n<span class=\"hljs-title function_\">getAllViaGraphQL</span>(): <span class=\"hljs-title class_\">Observable</span>&lt;<span class=\"hljs-title class_\">BookList</span>.<span class=\"hljs-property\">Books</span>[]&gt; { \n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">apollo</span>.<span class=\"hljs-property\">query</span>&lt;<span class=\"hljs-title class_\">BookList</span>.<span class=\"hljs-property\">Query</span>&gt;({\n    <span class=\"hljs-attr\">query</span>: booksQuery,\n  })\n  .<span class=\"hljs-title function_\">pipe</span>(\n    <span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ data }</span>) =&gt;</span> data.<span class=\"hljs-property\">books</span>)\n  );\n}\n</code></pre>\n<p>The return type <code>Observable&lt;BookList.Books[]&gt;</code> is not necessary here, but I wanted to show that the types perfectly fit.\nThis is nearly perfect, but I do not like the plural-S which is derived from the name of the query.\nFor this purpose we can use an <a href=\"https://graphql.org/learn/queries/#aliases\">alias</a>.\nThe GraphQL query should look now like this: </p>\n<pre><code class=\"language-typescript\">const booksQuery = gql`\n  query BookList {\n<span class=\"hljs-title\">    book:</span> books {\n      isbn\n      title\n<span class=\"hljs-built_in\">      description,</span>\n      rating\n      thumbnails {\n        url\n      }\n    }\n  }\n`;\n</code></pre>\n<p>We finally have the perfect output for our Apollo client!</p>\n<pre><code class=\"language-typescript\">getAllViaGraphQL(): Observable&lt;BookList.Book[]&gt; {\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.apollo.query&lt;BookList.Query&gt;({\n    query: booksQuery,\n  })\n  .pipe(\n    map(({ <span class=\"hljs-keyword\">data</span> }) =&gt; <span class=\"hljs-keyword\">data</span>.book)\n  );\n}\n</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>🎉 Congratulations!\nWe have mastered another journey for automatically generated api code.\nWe first learned the basics of GraphQL, got an introduction the Apollo GraphQL and we finally used GraphQL code generator to put everything together. \nYour project will benefit from less errors and more productivity.\nLet robots generate types for you and concentrate on more exciting work.</p>\n<p>But the possibilities do not end here.\n<strong>Next time we could generate also the service layer via the codegen.\nJust retweet this article if you are interested in this topic!</strong></p>\n<p>The following Angular demo app showcases the shown setup:</p>\n<ul>\n<li><a href=\"https://github.com/angular-schule/demo-api-codegen\">demo-api-codegen</a></li>\n</ul>\n<p>Have fun doing awesome Angular stuff! 😄</p>\n<h2 id=\"related-articles\">Related Articles</h2>\n<ul>\n<li>2018-04-12 - <a href=\"/blog/2018-04-swagger-codegen\">Generating Angular API clients with Swagger</a></li>\n<li>2018-06-08 - <a href=\"/blog/2018-06-swagger-codegen-is-now-openapi-generator\">Swagger Codegen is now OpenAPI Generator</a></li>\n</ul>\n<h2 id=\"thanks\">Thanks</h2>\n<p>I would like to thank <a href=\"https://twitter.com/dotansimha\">Dotan Simha</a> for his support while preparing the demo and the article.</p>\n","meta":{"title":"Generating Angular API clients with Apollo and GraphQL code generator","author":"Johannes Hoppe","mail":"johannes.hoppe@haushoppe-its.de","published":"2018-06-14T00:00:00.000Z","keywords":["Graphql","Codegen","Code Generator","Apollo","Angular","TypeScript"],"language":"en","header":{"url":"graphql-header.png","width":1200,"height":630}}}
