{"slug":"2018-04-swagger-codegen","html":"<p><strong>In this article, we will take a look at swagger codegen. It will save you a ton of work and pain by generating HTTP services automatically from your swagger API description.</strong></p>\n<hr>\n\n<p>Swagger is the worldâ€™s largest framework of tools for the <a href=\"https://github.com/OAI/OpenAPI-Specification\">OpenAPI Specification (OAS)</a>.\nIf you haven&#39;t added Swagger to your <strong>backend</strong> until now, you should do it now!\nIt&#39;s the de-facto standard for re-usable and maintainable APIs.\nThe toolset greatly eases the pain of documenting and interacting with APIs.\nItâ€™s literally a Swiss army knife for all things APIs.</p>\n<p>But in this article we are not going to talk about your backend.\nLet&#39;s assume your API is specified with Swagger and that we can focus on your Angular <strong>frontend</strong>.\nI&#39;m pretty sure nobody wants to write boring plumping code by hand and manually sync changes between backend and frontend over and over again.\nSo, how can we use the API documentation to generate code automatically? </p>\n<h2 id=\"hello-swagger-codegen\">Hello swagger-codegen</h2>\n<p>The official tool for code-generation is the <a href=\"https://github.com/swagger-api/swagger-codegen\">Swagger Code Generator</a>.\nIt supports a various range of target languages.\nThe list of supported languages and frameworks is growing constantly: <a href=\"https://github.com/swagger-api/swagger-codegen/tree/master/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages\">all available languages</a><br>We are interested in the <code>typescript-angular</code> code generator, of course.</p>\n<p>Don&#39;t be afraid!<br>Yes, the tool is written in Java.<br>But our final Angular code will not include any piece of Java at all. I promise you!</p>\n<p>First of all, you need the compiled generator: <code>swagger-codegen-cli.jar</code>.<br>You can download the latest version from the following location: <a href=\"http://central.maven.org/maven2/io/swagger/swagger-codegen-cli/2.3.1/swagger-codegen-cli-2.3.1.jar\">swagger-codegen-cli-2.3.1.jar</a><br>At the time of writing, v2.3.1 was stable.<br>If you need a snapshot of the development version, then take a look at: <a href=\"https://oss.sonatype.org/content/repositories/snapshots/io/swagger/swagger-codegen-cli/2.4.0-SNAPSHOT/\">2.4.0-SNAPSHOT</a><br>Right now you want to grab the snapshots. I have prepared <a href=\"https://github.com/swagger-api/swagger-codegen/pull/7984\">PR</a> that adds AOT-compatibility (via <a href=\"http://spektrakel.de/ng-packagr/\">ng-packagr</a>) to the Angular-Templates. This is huge! ðŸ˜„ </p>\n<h2 id=\"general-usage\">General usage</h2>\n<p>The idea is the following:<br>The code generator inspects the OpenAPI specification and writes a perfect API client for you.<br>That&#39;s it!\n<strong>No more work by a human.</strong><br>In this article we will use the following API:</p>\n<ul>\n<li><strong><a href=\"https://api.angular.schule/\">https://api.angular.schule/</a></strong></li>\n</ul>\n<p>Please feel free to explore it via <a href=\"https://api.angular.schule/swagger-ui/\">Swagger UI</a>.</p>\n<p><a href=\"https://api.angular.schule/swagger-ui/\"><img src=\"https://angular-schule.github.io/website-articles/2018-04-swagger-codegenswagger-ui.png\" alt=\"Screenshot\"></a></p>\n<p>Swagger codegen has a plenty of arguments to adjust.\nThe minimal command line arguments are:</p>\n<pre><code class=\"language-bash\">java -jar swagger-codegen-cli<span class=\"hljs-variable\">.jar</span> <span class=\"hljs-keyword\">generate</span> \\\n   -i https:<span class=\"hljs-comment\">//api.angular.schule/swagger.json \\</span>\n   -l typescript-angular \\\n   -o /<span class=\"hljs-keyword\">var</span>/tmp/angular_api_client\n</code></pre>\n<p><em>(Note: Windows users will have to write this without the backslashes and in one long line.)</em></p>\n<ul>\n<li><code>-i</code> or <code>--input-spec</code> defines the location of the input swagger spec, as URL or file (required)</li>\n<li><code>-l</code> or <code>--lang</code> defines the client language to generate  (required)</li>\n<li><code>-o</code> or <code>--output</code> defines the output directory, where the generated files should be written to (current dir by default)</li>\n<li><code>-c</code> or <code>--config</code> defines the path to an additional JSON configuration file.\nSupported options can be different for each language. We will look at this argument in the paragraph.</li>\n</ul>\n<p>Please type <code>java -jar swagger-codegen-cli.jar help generate</code> for a full explanation.</p>\n<h2 id=\"generating-code-for-angular\">Generating code for angular</h2>\n<p>We should explore the configuration options for the <code>angular-typescript</code> codegen.<br>These options are specific to the generator.</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-keyword\">java </span>-<span class=\"hljs-keyword\">jar </span><span class=\"hljs-keyword\">swagger-codegen-cli.jar </span><span class=\"hljs-built_in\">config</span>-help -l typescript-angular\n</code></pre>\n<p>You will have to adjust the following options:</p>\n<ul>\n<li><code>npmName</code>: The name under which you want to publish generated npm package.<br>Hint: You <strong>have to</strong> define a name here, or some files related to a proper npm package will be skipped and the generated <code>README.md</code> won&#39;t make that much sense! This is <a href=\"https://github.com/swagger-api/swagger-codegen/blob/157e6b7fab4c4b3cddee88fb1100271c2365a6da/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/TypeScriptAngularClientCodegen.java#L101\">by design</a>, see also <a href=\"https://github.com/swagger-api/swagger-codegen/issues/6369\">#6369</a>.</li>\n<li><code>npmVersion</code>: The version of the generated npm package. (default 1.0.0)</li>\n<li><code>npmRepository</code>: Use this property to set a URL to your private npm repository in the package.json.\nI <strong>really recommend</strong> setting the option, if you want to prevent accidental publishing to npmjs.com. (see <a href=\"https://docs.npmjs.com/files/package.json#publishconfig\">publishConfig</a>)</li>\n<li><code>snapshot</code>: When setting this to <code>true</code> the version will be suffixed with <code>-SNAPSHOT.yyyyMMddHHmm</code>.\nThis is very handy if you want to have unique package names to publish.</li>\n<li><code>ngVersion</code>: The version of angular that will be required by the generated <code>package.json</code>.\nIt&#39;s a good idea to align this version with the angular version of your main app.\nThe default is <code>4.3</code>.\nA version smaller than 4.3 yields to the generation of the obsolete <a href=\"https://angular-buch.com/blog/2017-11-httpclient\">HttpService (German blogpost)</a>.</li>\n</ul>\n<p>This is a complete example for our demo api:</p>\n<pre><code class=\"language-bash\">java -jar swagger-codegen-cli<span class=\"hljs-variable\">.jar</span> <span class=\"hljs-keyword\">generate</span> \\\n   -i https:<span class=\"hljs-comment\">//api.angular.schule/swagger.json \\</span>\n   -l typescript-angular \\\n   -o /<span class=\"hljs-keyword\">var</span>/tmp/angular_api_client \\\n   --additional-properties npmName=@angular-schule/book-monkey-api,snapshot=true,ngVersion=<span class=\"hljs-number\">5</span><span class=\"hljs-variable\">.0</span><span class=\"hljs-variable\">.0</span>\n</code></pre>\n<p>I wonder why the command line argument was called <code>additional-properties</code>! There must have been historical reasons... ðŸ˜„\nAs already pointed out, you can also define the additional properties (=== options) via a config file.\nThis cleans up the command a bit:</p>\n<pre><code class=\"language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;npmName&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;@angular-schule/book-monkey-api&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;npmVersion&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;0.0.1&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;snapshot&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;ngVersion&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;5.0.0&quot;</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<pre><code class=\"language-bash\">java -jar swagger-codegen-cli<span class=\"hljs-variable\">.jar</span> <span class=\"hljs-keyword\">generate</span> \\\n   -i https:<span class=\"hljs-comment\">//api.angular.schule/swagger.json \\</span>\n   -l typescript-angular \\\n   -o /<span class=\"hljs-keyword\">var</span>/tmp/angular_api_client \\\n   -c options<span class=\"hljs-variable\">.json</span>\n</code></pre>\n<h3 id=\"dont-accidentally-publish-to-npmjscom-rotating_light\">Don&#39;t accidentally publish to npmjs.com! ðŸš¨</h3>\n<p>There is a minimal danger that you accidentally published your top-secret API client to the public npmjs.com repository! \nPlease choose between one of the two options to prevent this:</p>\n<ol>\n<li>Set the <code>npmRepository</code> option. This will define a <code>publishConfig.registry</code> entry in the <code>package.json</code>.</li>\n<li>Use a <code>npmName</code> with a scope (e.g. <code>@angular-schule/book-monkey-api</code>)\n  By default, scoped packages are private on npmjs.com.\n  You have to explicelty make them public with <code>--access=public</code>.\n  A scope can be easily redirected to a private registry, too. \n  See <a href=\"https://docs.npmjs.com/misc/scope#associating-a-scope-with-a-registry\">this document</a> for more information.</li>\n</ol>\n<h2 id=\"whats-inside-the-box\">What&#39;s inside the box?</h2>\n<p>We should take a look at the generated files:</p>\n<img src=\"https://angular-schule.github.io/website-articles/2018-04-swagger-codegen/generated-code.png\" width=\"243\" alt=\"Screenshot\">\n\n\n<p>You will see that this is a complete angular project with all required config files and typescript files to create an <a href=\"https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/edit\">angular package</a>.\nIt&#39;s a crazy world and unlike every other angular package we have to compile this again.</p>\n<p>To install the required dependencies and to build the typescript sources run:</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">npm</span> install\n<span class=\"hljs-built_in\">npm</span> run build\n</code></pre>\n<p>Now everything is prepared to finally publish the package to NPM or a private repository.</p>\n<pre><code class=\"language-bash\">npm publish dist --<span class=\"hljs-keyword\">access</span>=<span class=\"hljs-keyword\">public</span>\n</code></pre>\n<h2 id=\"consuming-the-api-with-angularcli\">Consuming the API with @angular/cli</h2>\n<p>now navigate to the folder of your consuming Angular project and run</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">npm</span> install @angular-schule/book-monkey-api --save\n</code></pre>\n<p>It&#39;s generally a good practice to extend the <code>src/environments/*.ts</code> files by adding a corresponding base path:</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-comment\">// src/environments/environments.ts</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> environment = {\n  production: <span class=\"hljs-keyword\">false</span>,\n  API_BASE_PATH: <span class=\"hljs-string\">&#x27;https://api.angular.schule&#x27;</span>\n};\n</code></pre>\n<p>The shortest possible setup looks like this:</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-comment\">// src/app/app.module.ts</span>\nimport { HttpClientModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/common/http&#x27;</span>;\nimport { ApiModule, BASE_PATH } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular-schule/book-monkey-api&#x27;</span>;\nimport { environment } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../environments/environment&#x27;</span>;\n\n@<span class=\"hljs-title function_ invoke__\">NgModule</span>({\n  <span class=\"hljs-attr\">declarations</span>: [AppComponent],\n  <span class=\"hljs-attr\">imports</span>: [\n    HttpClientModule,\n    ApiModule\n  ],\n  <span class=\"hljs-attr\">providers</span>: [{ <span class=\"hljs-attr\">provide</span>: BASE_PATH, <span class=\"hljs-attr\">useValue</span>: environment.API_BASE_PATH }],\n  <span class=\"hljs-attr\">bootstrap</span>: [AppComponent]\n})\nexport <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppModule</span> </span>{ }\n</code></pre>\n<p>You have to import both: the <code>HttpClientModule</code> from Angular as well as our generated <code>ApiModule</code>. You might wonder why <code>HttpClientModule</code> is included here. One could think that <code>ApiModule</code> should do that import for us, but this can lead to a strange but intended behaviour of Angular (see <a href=\"https://github.com/angular/angular/issues/20575\">issue #20575</a>).</p>\n<p>The usage of the generated API is straightforward.\nEvery REST operation has its own method.\nFor example, if we want to get a list of all books, then we can simply import the <code>BookService</code> and call the corresponding method.</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-comment\">// src/app/app.component.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BookService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular-schule/book-monkey-api&#x27;</span>;\n\n<span class=\"hljs-meta\">@Component</span>({\n  <span class=\"hljs-comment\">// ...</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppComponent</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">bookService</span>: <span class=\"hljs-title class_\">BookService</span></span>) {\n\n    bookService\n      .<span class=\"hljs-title function_\">booksGet</span>()\n      .<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">log</span>);\n  }\n}\n</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>ðŸŽ‰ Congratulations!\nWe have mastered a journey for automatically generated api code.\nYour project will benefit from less errors and more harmony between team members,\nwho can concentrate on real solutions instead of boring boilerplate code.</p>\n<p>Now it should be your task to automate the code generation on you CI system.\nOn every (relevant) change of the backend you should also generate a new client.\nTo upgrade to the latest version in your consuming Angular project, you just need to call <code>npm install PACKAGE_NAME --save</code> again.</p>\n<p>You can find the full setup of the swagger codegen here:</p>\n<ul>\n<li><strong><a href=\"https://github.com/angular-schule/demo-api-codegen/tree/master/swagger-codegen\">demo-api-codegen/swagger-codegen</a></strong></li>\n<li>which produces this npm package: <a href=\"https://www.npmjs.com/package/@angular-schule/book-monkey-api\">@angular-schule/book-monkey-api</a></li>\n</ul>\n<p>The following Angular demo app is using the package <code>@angular-schule/book-monkey-api</code>:</p>\n<ul>\n<li><a href=\"https://github.com/angular-schule/demo-api-codegen\">demo-api-codegen</a></li>\n</ul>\n<p>Have fun doing awesome Angular stuff! ðŸ˜„</p>\n<h2 id=\"related-articles\">Related Articles</h2>\n<ul>\n<li>2018-06-08 - <a href=\"/blog/2018-06-swagger-codegen-is-now-openapi-generator\">Swagger Codegen is now OpenAPI Generator</a></li>\n<li>2018-06-10 - <a href=\"/blog/2018-06-apollo-graphql-code-generator\">Generating Angular API clients with Apollo and GraphQL code generator</a></li>\n</ul>\n<hr>\n<h2 id=\"extra-using-own-templates\">Extra: Using own templates</h2>\n<p>Sooner or later everybody wants to customise some aspects of the generated code.\nYou can change most parts by modifying the mustache-templates.</p>\n<ul>\n<li><code>-t</code> or <code>--template-dir</code> defines a folder containing own template files.\nIf specified, those templates files will be used instead of the inbuilt versions.\nYou can start by modifying the <a href=\"https://github.com/swagger-api/swagger-codegen/tree/master/modules/swagger-codegen/src/main/resources/typescript-angular\">original ones from Github</a>.</li>\n</ul>\n<h2 id=\"extra-building-the-codegen-from-the-sources\">Extra: Building the codegen from the sources</h2>\n<p>You might want to use the very latest version directly from Github.\nOr you might want to contribute to the codegen -- that would be a great idea!\nAll in all, a first start isn&#39;t that complicated, since everything is nicely prepared with Maven.</p>\n<pre><code>git <span class=\"hljs-built_in\">clone</span> https://github.com/swagger-api/swagger-codegen.git\n<span class=\"hljs-built_in\">cd</span> swagger-codegen\nmvn clean install\n</code></pre>\n<p>We are using the master branch, some unit test might be broken.\nOr you just want to save some time...\nAnyway, <code>mvn clean package -Dmaven.test.skip</code> will skip the tests. ;-)</p>\n<p>Maven will create the necessary Java archive at the location <code>modules/swagger-codegen-cli/target/swagger-codegen-cli.jar</code>\nNow you should have created a snapshot version:</p>\n<pre><code>java -jar modules/swagger-codegen-<span class=\"hljs-keyword\">cli</span>/target/swagger-codegen-<span class=\"hljs-keyword\">cli</span>.jar <span class=\"hljs-keyword\">version</span>\n&gt; 2.4.0-SNAPSHOT\n</code></pre>\n<p>It&#39;s important to know that you have to use Java 7 or 8.\n<a href=\"https://github.com/swagger-api/swagger-codegen/issues/7976\">It won&#39;t compile with Java 9</a>. </p>\n<p>Right now it&#39;s fine to install Java 8 as instructed in the README of swagger-codegen.\nThis should be fixed some day! ðŸ˜‰\nJust for the records, on my Mac I executed the following workaround:</p>\n<pre><code>brew cask install caskroom/versions/java8\n\n<span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">JAVA_HOME</span>=`/usr/libexec/java_home -v 1.8`\n<span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">PATH</span>=<span class=\"hljs-variable\">${JAVA_HOME}</span>/bin:$PATH\n\njava -version\n</code></pre>\n","meta":{"title":"Generating Angular API clients with Swagger","author":"Johannes Hoppe","mail":"johannes.hoppe@haushoppe-its.de","published":"2018-04-12T00:00:00.000Z","keywords":["Swagger","Codegen","TypeScript"],"language":"en","thumbnail":"https://angular-schule.github.io/website-articles/2018-04-swagger-codegen/swagger-banner.png"}}
