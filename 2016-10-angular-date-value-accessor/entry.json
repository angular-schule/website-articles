{"slug":"2016-10-angular-date-value-accessor","html":"<h2 id=\"the-problem\">The problem</h2>\n<p>Working with forms is pretty easy in Angular.\nYou just need to decide between Template-Driven and Reactive Forms and you are ready to start with some bindings and validation. The following code shows a two-way data binding with <code>ngModel</code> against a property of type <code>string</code>:</p>\n<pre><code>&lt;input type<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;text&quot;</span> name<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;name&quot;</span> [(ngModel)]<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;myName&quot;</span>&gt;\n</code></pre>\n<p>But there is one problem to tackle: models of type <code>Date</code>!<br>You might wonder, because HTML5 date input controls are not working as expected:</p>\n<pre><code>&lt;input type<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;date&quot;</span> name<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;releaseDate&quot;</span> [(ngModel)]<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;myBirtday&quot;</span>&gt;\n</code></pre>\n<p>Even if <code>myBirtday</code> contains a valid date, the date input control is not rendering the value at all.\nIn fact, we are supposed to set a string that is representing a full-date as defined in <a href=\"https://www.w3.org/TR/html-markup/references.html#refsRFC3339\">RFC 3339</a>. The same string is written back to the model, when changes have been made, e.g. &quot;2016-10-13&quot;. This behavior is specified in the <a href=\"https://www.w3.org/TR/html-markup/input.date.html#input.date.attrs.value\">W3C HTML language reference for <code>inputEl.value</code></a>. According to the specification, date input controls are based on strings. So what can we do to keep the Date type?</p>\n<h2 id=\"a-solution\">A solution</h2>\n<p>Let&#39;s review the possible solutions:</p>\n<ol>\n<li><p>We could create a <a href=\"http://blog.thoughtram.io/angular/2016/07/27/custom-form-controls-in-angular-2.html\">custom form control</a>. This would be a clean and extendable solution, but it might lead to more code than required for the given use-case.</p>\n</li>\n<li><p>We could convert the strings directly in our <code>@Component</code> as described <a href=\"http://stackoverflow.com/a/37055451\">here</a>. But do we really want to bloat our &quot;business code layer&quot; with boilerplate code?</p>\n</li>\n<li><p>We could create a <strong>custom value accessor</strong>. The following article discusses this option.</p>\n</li>\n</ol>\n<p>It turns out, that date input control has another, not that well-known property: <a href=\"https://www.w3.org/TR/2012/WD-html5-20121025/common-input-element-apis.html#dom-input-valueasdate\"><code>inputEl.valueAsDate</code></a>! The <code>inputEl.valueAsDate</code> attribute represents the value (still a string) of the element, interpreted as a date. This is exactly what we need. Now we only need to convince Angular to use this property, instead of <code>inputEl.value</code>. </p>\n<p>Fortunately Angular is very expansible here. FormControls (both template-driven and reactive) subscribe for values and write values via Directives that implement <code>ControlValueAccessor</code>. Take a look at the relevant method <a href=\"https://github.com/angular/angular/blob/2.1.0-beta.0/modules/%40angular/forms/src/directives/shared.ts#L140\">selectValueAccessor</a>, which is used in all necessary directives. Normal input controls (e.g. <code>&lt;input type=&quot;text&quot;&gt;</code>) or textareas are handled by the <a href=\"https://github.com/angular/angular/blob/2.1.0-beta.0/modules/%40angular/forms/src/directives/default_value_accessor.ts\">DefaultValueAccessor</a>. Another example is the <a href=\"https://github.com/angular/angular/blob/2.1.0-beta.0/modules/%40angular/forms/src/directives/checkbox_value_accessor.ts\">CheckboxValueAccessor</a> which is applied to checkbox input controls.</p>\n<p>The job isn&#39;t complicated at all. We just need to implement a new value accessor for date input controls.<br><code>DateValueAccessor</code> is a nice name:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// date-value-accessor.ts</span>\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Directive</span>, <span class=\"hljs-title class_\">ElementRef</span>, <span class=\"hljs-title class_\">HostListener</span>, <span class=\"hljs-title class_\">Renderer</span>, forwardRef } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ControlValueAccessor</span>, <span class=\"hljs-variable constant_\">NG_VALUE_ACCESSOR</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/forms&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">DATE_VALUE_ACCESSOR</span>: <span class=\"hljs-built_in\">any</span> = {\n  <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-variable constant_\">NG_VALUE_ACCESSOR</span>,\n  <span class=\"hljs-attr\">useExisting</span>: <span class=\"hljs-title function_\">forwardRef</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title class_\">DateValueAccessor</span>),\n  <span class=\"hljs-attr\">multi</span>: <span class=\"hljs-literal\">true</span>\n};\n\n<span class=\"hljs-comment\">/**\n * The accessor for writing a value and listening to changes on a date input element\n *\n *  ### Example\n *  `&lt;input type=&quot;date&quot; name=&quot;myBirthday&quot; ngModel useValueAsDate&gt;`\n */</span>\n<span class=\"hljs-meta\">@Directive</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">&#x27;[useValueAsDate]&#x27;</span>,\n  <span class=\"hljs-attr\">providers</span>: [<span class=\"hljs-variable constant_\">DATE_VALUE_ACCESSOR</span>]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DateValueAccessor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">ControlValueAccessor</span> {\n\n  <span class=\"hljs-meta\">@HostListener</span>(<span class=\"hljs-string\">&#x27;input&#x27;</span>, [<span class=\"hljs-string\">&#x27;$event.target.valueAsDate&#x27;</span>]) onChange = <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">_</span>: <span class=\"hljs-built_in\">any</span></span>) =&gt;</span> { };\n  <span class=\"hljs-meta\">@HostListener</span>(<span class=\"hljs-string\">&#x27;blur&#x27;</span>, []) onTouched = <span class=\"hljs-function\">() =&gt;</span> { };\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">_renderer</span>: <span class=\"hljs-title class_\">Renderer</span>, <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">_elementRef</span>: <span class=\"hljs-title class_\">ElementRef</span></span>) { }\n\n  <span class=\"hljs-title function_\">writeValue</span>(<span class=\"hljs-attr\">value</span>: <span class=\"hljs-title class_\">Date</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_renderer</span>.<span class=\"hljs-title function_\">setElementProperty</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_elementRef</span>.<span class=\"hljs-property\">nativeElement</span>, <span class=\"hljs-string\">&#x27;valueAsDate&#x27;</span>, value);\n  }\n\n  <span class=\"hljs-title function_\">registerOnChange</span>(<span class=\"hljs-attr\">fn</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">_</span>: <span class=\"hljs-built_in\">any</span></span>) =&gt;</span> <span class=\"hljs-built_in\">void</span>): <span class=\"hljs-built_in\">void</span> { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">onChange</span> = fn; }\n  <span class=\"hljs-title function_\">registerOnTouched</span>(<span class=\"hljs-attr\">fn</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">void</span>): <span class=\"hljs-built_in\">void</span> { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">onTouched</span> = fn; }\n\n  <span class=\"hljs-title function_\">setDisabledState</span>(<span class=\"hljs-attr\">isDisabled</span>: <span class=\"hljs-built_in\">boolean</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_renderer</span>.<span class=\"hljs-title function_\">setElementProperty</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_elementRef</span>.<span class=\"hljs-property\">nativeElement</span>, <span class=\"hljs-string\">&#x27;disabled&#x27;</span>, isDisabled);\n  }\n}\n</code></pre>\n<p>We attach the <code>DateValueAccessor</code> to the multi-provider <code>DATE_VALUE_ACCESSOR</code>, so that <a href=\"https://github.com/angular/angular/blob/2.1.0-beta.0/modules/%40angular/forms/src/directives/shared.ts#L140\">selectValueAccessor</a> can find it.</p>\n<p>The only question is, which selector should be used. I decided for an opt-in solution. Here the DateValueAccessor selects on the attribute &quot;useValueAsDate&quot;.</p>\n<pre><code class=\"language-html\">&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=&quot;date&quot; <span class=\"hljs-type\">name</span>=&quot;myBirthday&quot; ngModel useValueAsDate&gt;\n\n<span class=\"hljs-keyword\">OR</span>\n\n&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=&quot;date&quot; <span class=\"hljs-type\">name</span>=&quot;myBirthday&quot; [(ngModel)]=&quot;myBirthday&quot; useValueAsDate&gt;\n\n<span class=\"hljs-keyword\">OR</span>\n\n&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=&quot;date&quot; formControlName=&quot;myBirthday&quot; useValueAsDate&gt;\n</code></pre>\n<p>It is also possible to fix the default implementation. The following selector would activate the feature magically. </p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// this selector changes the previous behavior silently and might break existing code</span>\nselector: &#x27;<span class=\"hljs-keyword\">input</span>[<span class=\"hljs-keyword\">type</span>=date][formControlName],<span class=\"hljs-keyword\">input</span>[<span class=\"hljs-keyword\">type</span>=date][formControl],<span class=\"hljs-keyword\">input</span>[<span class=\"hljs-keyword\">type</span>=date][ngModel]&#x27;\n</code></pre>\n<p>But please be aware, that this might break existing implementations that rely of the old behaviour. So I would go for the opt-in version!</p>\n<h2 id=\"its-all-on-npm\">It&#39;s all on NPM</h2>\n<p>For your convenience, I created the project <a href=\"https://github.com/JohannesHoppe/angular-date-value-accessor\"><code>angular-data-value-accessor</code></a> on Github.<br>There is also a NPM package available:</p>\n<pre><code class=\"language-bash\">npm install --<span class=\"hljs-keyword\">save</span> angular-<span class=\"hljs-built_in\">date</span>-value-accessor\n</code></pre>\n<p>Then import the module via NgModule:</p>\n<pre><code class=\"language-js\">// app.module.ts\n\nimport { DateValueAccessorModule } from <span class=\"hljs-string\">&#x27;angular-date-value-accessor&#x27;</span>;\n\n<span class=\"hljs-variable\">@NgModule</span>({\n  imports: [\n    DateValueAccessorModule\n  ]\n})\nexport <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppModule</span> </span>{ }\n</code></pre>\n<h2 id=\"demo\">Demo</h2>\n<p>Of course, there is a demo at:\n<a href=\"http://johanneshoppe.github.io/angular-date-value-accessor/\">http://johanneshoppe.github.io/angular-date-value-accessor/</a></p>\n","meta":{"title":"DateValueAccessor: How to use date input controls with Angular Forms","author":"Johannes Hoppe","mail":"johannes.hoppe@haushoppe-its.de","published":"2016-10-12T00:00:00.000Z","last-change":"2017-10-25T00:00:00.000Z","keywords":["Angular","Forms","DateValueAccessor","DATE_VALUE_ACCESSOR"],"language":"en","thumbnail":"https://angular-schule.github.io/website-articles/2016-10-angular-date-value-accessor/img/screenshot.png","darken-thumbnail":true}}