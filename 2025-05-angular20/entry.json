{"slug":"2025-05-angular20","html":"<p>Everything new comes in May - or at least a new major version of Angular:\nOn <strong>May 28, 2025</strong>, <strong>Angular 20</strong> was released! You can find the release information directly from the Angular team in the official <a href=\"https://blog.angular.dev/announcing-angular-v20-b5c9c06cf301\">Angular Blog</a>.</p>\n<p>For migrating to Angular 20, we recommend using the <code>ng update</code> command.\nDetailed information on the required steps can be found in the <a href=\"https://angular.dev/update-guide\">Angular Update Guide</a>.</p>\n<blockquote>\n<p>🇩🇪 This article is available in German language here: <a href=\"https://angular-buch.com/blog/2025-05-angular20\">Angular 20 ist da!</a></p>\n</blockquote>\n<h2 id=\"versions-of-typescript-and-nodejs\">Versions of TypeScript and Node.js</h2>\n<p>For Angular 20, <em>at least</em> the following versions of TypeScript and Node.js are required:</p>\n<ul>\n<li>TypeScript: 5.8</li>\n<li>Node.js: 20.19.x or higher, 22.12.x or higher, or 24.0.x or higher</li>\n</ul>\n<p>Support for Node.js version 18 has been removed. You can find detailed information about supported versions in the <a href=\"https://angular.dev/reference/versions\">Angular documentation</a>.</p>\n<h2 id=\"the-new-coding-style-guide\">The new Coding Style Guide</h2>\n<p>Angular has evolved significantly in recent years, and many new concepts have been integrated into the framework.\nThe Angular documentation was partially out of date: the Coding Style Guide, in particular, had no recommendations for the current status quo.\nThis changed with Angular 20:\nThe new <a href=\"https://angular.dev/style-guide\">Style Guide</a> has been heavily revised and streamlined.\nIt includes current recommendations and best practices and serves as a guideline for development with current Angular versions.</p>\n<h3 id=\"no-more-suffixes-more-deliberate-naming-and-new-patterns\">No more suffixes: more deliberate naming and new patterns</h3>\n<p>An important change worth mentioning concerns the suffixes in file and class names:\nThe new Style Guide <em>no longer</em> recommends using suffixes for components, services, and directives.\nStarting with Angular 20, the CLI no longer generates suffixes like <code>.component.ts</code> or <code>.service.ts</code> by default.\nThis new setting only applies to newly created projects.</p>\n<p>The command <code>ng generate component book-card</code> thus produces the following output:</p>\n<p><strong>up to Angular 19:</strong></p>\n<pre><code><span class=\"hljs-attribute\">src</span>/app\n  book-card\n    book-card<span class=\"hljs-selector-class\">.component</span><span class=\"hljs-selector-class\">.ts</span>\n    book-card<span class=\"hljs-selector-class\">.component</span><span class=\"hljs-selector-class\">.html</span>\n    book-card<span class=\"hljs-selector-class\">.component</span><span class=\"hljs-selector-class\">.scss</span>\n    book-card<span class=\"hljs-selector-class\">.component</span><span class=\"hljs-selector-class\">.spec</span>.ts\n</code></pre>\n<pre><code class=\"language-ts\">// book-card.component.ts\n// ...\n<span class=\"hljs-variable\">@Component</span>(<span class=\"hljs-regexp\">/* ... */</span>)\nexport <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BookCardComponent</span> </span>{}\n</code></pre>\n<p><strong>starting with Angular 20:</strong></p>\n<pre><code>src/app\n  book-<span class=\"hljs-keyword\">card</span>\n    book-<span class=\"hljs-keyword\">card</span>.ts\n    book-<span class=\"hljs-keyword\">card</span>.html\n    book-<span class=\"hljs-keyword\">card</span>.scss\n    book-<span class=\"hljs-keyword\">card</span>.spec.ts\n</code></pre>\n<pre><code class=\"language-ts\">// book-card.ts\n// ...\n<span class=\"hljs-variable\">@Component</span>(<span class=\"hljs-regexp\">/* ... */</span>)\nexport <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BookCard</span> </span>{}\n</code></pre>\n<p>The goal: Angular applications should contain less boilerplate, and we should think more deliberately about naming abstractions.\nInstead of automatically generated constructs like <code>product-detail.component.ts</code>, we&#39;re now expected to think: What is this class called? What does it do? How much does the name say on its own?\nWe welcome this development, as it leads to shorter, more purposeful file and class names.</p>\n<p>A practical example: For routed components, we prefer the suffix <code>page</code>, such as <code>checkout-page.ts</code> (class name <code>CheckoutPage</code>). It clearly indicates its purpose without referring to technical details like <code>Component</code>.\nA component that only displays content and contains no logic could be named <code>CheckoutView</code>, for example.</p>\n<p>If you want to keep the previous behavior, you can still specify a <code>type</code> when generating, which will result in a suffix.\nThis setting can also be made permanent in the <code>angular.json</code> file.</p>\n<pre><code class=\"language-bash\">ng <span class=\"hljs-keyword\">generate</span> component book-card --<span class=\"hljs-keyword\">type</span>=component\n</code></pre>\n<h2 id=\"zoneless-developer-preview\">Zoneless Developer Preview</h2>\n<p>The Angular team has been working for several years to optimize <em>synchronization</em> (also known as <em>change detection</em>) in the framework.\nOne milestone was the introduction of signals, which allow precise change detection.\nIn the future, Angular will no longer need the <em>zone.js</em> library to patch browser interfaces and trigger change detection.</p>\n<!-- We already covered change detection and the setting for a “zoneless application” in detail in our [blog post for Angular 18 (German language)](/blog/2024-06-angular18). -->\n\n<p>With Angular 20, <em>zoneless</em> is released in <em>Developer Preview</em> status.\nThe interface is largely stable. However, short-term changes may still occur, so usage in production should be carefully considered.</p>\n<p>To activate zoneless change detection, use the <code>provideZonelessChangeDetection()</code> function.\nThe word <code>experimental</code> has been removed from the function name.\nIt&#39;s also recommended to enable a global error handler that catches unhandled exceptions.</p>\n<pre><code class=\"language-ts\">// app<span class=\"hljs-selector-class\">.config</span><span class=\"hljs-selector-class\">.ts</span>\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    <span class=\"hljs-built_in\">provideZonelessChangeDetection</span>(),\n    <span class=\"hljs-built_in\">provideBrowserGlobalErrorListeners</span>()\n  ]\n};\n</code></pre>\n<p>The Angular CLI offers to generate a <em>zoneless</em> application when creating a new project:</p>\n<pre><code class=\"language-bash\">➜  ~ ng <span class=\"hljs-built_in\">new</span> my-app\n✔ <span class=\"hljs-keyword\">Do</span> you want <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">create</span> a <span class=\"hljs-string\">&#x27;zoneless&#x27;</span> application <span class=\"hljs-keyword\">without</span> <span class=\"hljs-type\">zone</span>.js (Developer Preview)? Yes\n</code></pre>\n<p>The setting can also be controlled with the new <code>zoneless</code> parameter, which can be negated using <code>no</code>:</p>\n<pre><code class=\"language-bash\">ng <span class=\"hljs-keyword\">new</span> my-app <span class=\"hljs-comment\">--zoneless</span>\nng <span class=\"hljs-keyword\">new</span> my-app <span class=\"hljs-comment\">--no-zoneless</span>\n</code></pre>\n<h2 id=\"structural-directives-ngif-ngfor-ngswitch\">Structural directives <code>ngIf</code>, <code>ngFor</code>, <code>ngSwitch</code></h2>\n<p>With Angular 20, the old directives <code>ngIf</code>, <code>ngFor</code>, and <code>ngSwitch</code> are marked as <em>deprecated</em>.\nThey will likely be completely removed from the framework with Angular 22 (in one year).</p>\n<p>The background is the new built-in control flow introduced with Angular 17.\nThese directives can be replaced by Angular&#39;s built-in expressions: <code>@if</code>, <code>@for</code>, <code>@switch</code>, and <code>@let</code>.</p>\n<pre><code class=\"language-html\"><span class=\"hljs-comment\">&lt;!-- with directive (deprecated) --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">&quot;condition&quot;</span>&gt;</span>Hello world<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- with control flow --&gt;</span>\n@if (condition) {<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Hello world<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>}\n</code></pre>\n<!-- We covered the control flow syntax in detail in our [blog post on Angular 17](/blog/2023-11-angular17#neuer-control-flow-if-for-switch). -->\n<p>The Angular CLI also provides a migration script, so switching to the new syntax shouldn&#39;t be difficult:</p>\n<pre><code class=\"language-bash\">ng <span class=\"hljs-keyword\">generate</span> @angular/core:control-flow\n</code></pre>\n<h2 id=\"experimental-test-builder-for-vitest\">Experimental test builder for Vitest</h2>\n<p>The test runner Karma, still the default for unit and integration tests in Angular, is no longer being developed.\nSince this decision, the Angular team has been working on integrating alternative test runners into the Angular CLI.\nTwo years ago, experimental builders for <a href=\"https://blog.angular.dev/moving-angular-cli-to-jest-and-web-test-runner-ef85ef69ceca\">Jest and Web Test Runner</a> were released.\nWith Angular 20, another experimental integration is added for <a href=\"https://vitest.dev\">Vitest</a>:\nVitest has already become a staple in other web frameworks based on the <a href=\"https://vite.dev\">Vite</a> bundler.\nAngular&#39;s build process has already <a href=\"/blog/2023-05-angular16#esbuild\">used ESBuild with Vite since version 16</a>.\nWith this gradual switch, we can now also use Vitest for unit and integration tests.</p>\n<p>Which of the experimental test runners will become Angular&#39;s new standard is not yet decided!\nAll approaches are experimental and will be evaluated further in the coming months.</p>\n<p>To use Vitest with the Angular CLI, first add the required dependencies:</p>\n<pre><code class=\"language-sh\">npm <span class=\"hljs-selector-tag\">i</span> vitest jsdom <span class=\"hljs-attr\">--save-dev</span>\n</code></pre>\n<p>Then, adjust the testing configuration in the <code>angular.json</code> file:</p>\n<pre><code class=\"language-json\"><span class=\"hljs-string\">&quot;test&quot;</span>: {\n  <span class=\"hljs-string\">&quot;builder&quot;</span>: <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@angular</span>/build:unit-test&quot;</span>,\n  <span class=\"hljs-string\">&quot;options&quot;</span>: {\n      <span class=\"hljs-string\">&quot;tsConfig&quot;</span>: <span class=\"hljs-string\">&quot;tsconfig.spec.json&quot;</span>,\n      <span class=\"hljs-string\">&quot;buildTarget&quot;</span>: <span class=\"hljs-string\">&quot;::development&quot;</span>,\n      <span class=\"hljs-string\">&quot;runner&quot;</span>: <span class=\"hljs-string\">&quot;vitest&quot;</span>\n  }\n}\n</code></pre>\n<p>In your tests, use Vitest&#39;s functions by importing the following:</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { describe, beforeEach, it, expect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vitest&#x27;</span>;\n<span class=\"hljs-comment\">// ...</span>\n</code></pre>\n<p>Run the tests as usual using <code>ng test</code>.</p>\n<p>Vitest is largely compatible with the APIs of <a href=\"https://jestjs.io/\">Jest</a> and Karma, so switching is definitely worth trying.\nIdeally, you&#39;ll need only minimal changes in your tests.</p>\n<p>One of the three experimental builders (Jest, Web Test Runner, Vitest) will likely become the new standard.\nWe welcome the move to rely on established standards outside the Angular ecosystem and to deprecate the custom Karma test runner.\nWe&#39;ll continue to keep you updated.</p>\n<h2 id=\"stable-signal-apis-effect-linkedsignal-and-tosignal\">Stable Signal APIs: <code>effect</code>, <code>linkedSignal</code>, and <code>toSignal</code></h2>\n<p>Since Angular 16, signals have paved the way for a new, reactive Angular.\nIn Angular 20, more APIs from the signals ecosystem have now been officially released as stable: <code>effect</code>, <code>linkedSignal</code>, and <code>toSignal</code>.</p>\n<p>These functions were previously experimental and are now part of the stable API set:</p>\n<ul>\n<li><code>effect()</code> automatically reacts to signal changes and performs defined side effects - without lifecycle hooks.</li>\n<li><code>linkedSignal()</code> enables bidirectional binding between a signal and an external source - e.g. a component or a FormControl.</li>\n<li><code>toSignal()</code> converts observable data into a readable signal - ideal for integrating existing streams.</li>\n</ul>\n<p>You&#39;ll find more details and examples in our Signals series:</p>\n<ul>\n<li><a href=\"https://angular.schule/blog/2024-11-linked-signal\">Angular 19: Introducing LinkedSignal for Responsive Local State Management</a></li>\n<li><a href=\"https://angular.schule/blog/2024-11-effect-afterrendereffect\">Angular 19: Mastering effect and afterRenderEffect</a></li>\n</ul>\n<h2 id=\"httpresource-load-data-with-signals\">httpResource: Load data with signals</h2>\n<p>In October 2024, the new experimental Resource API was introduced. We covered it in detail in a <a href=\"https://angular.schule/blog/2025-05-resource-api\">blog post</a>.\nIt connects the synchronous world of signals with asynchronously fetched data, e.g. via HTTP.\nThe data is loaded asynchronously using a loader and provided via signals.</p>\n<p>A few weeks ago, another variant of the Resource was introduced: <code>httpResource</code>.\nIt uses Angular&#39;s <code>HttpClient</code> under the hood to perform an HTTP request directly.\nYou no longer need to write the request yourself - the resource handles it for you.</p>\n<pre><code class=\"language-ts\">booksResource = httpResource&lt;Book[]&gt;(\n  <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-string\">&#x27;https://api.example.org/books&#x27;</span>,\n  { <span class=\"hljs-attr\">defaultValue</span>: [] }\n);\n<span class=\"hljs-comment\">// ...</span>\n<span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(booksResource.value())\n</code></pre>\n<p>The request must be generated using a function.\nThis is because it runs in a <em>reactive context</em>: If you use signals inside the function, the request is re-executed automatically when any of those signals change.\nAdditional request details can be passed in an options object:</p>\n<pre><code class=\"language-ts\">booksResource = httpResource&lt;Book[]&gt;(\n  <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> ({\n    url: <span class=\"hljs-string\">&#x27;https://api.example.org/books&#x27;</span>,\n    params: {\n      search: <span class=\"hljs-string\">&#x27;Angular&#x27;</span>\n    }\n  })\n);\n</code></pre>\n<p>Please note that a resource is only meant for <em>retrieving</em> data from an API and exposing it with signals.\nWrite operations such as create, update, or delete cannot be handled with a resource.\nYou must continue to use <code>HttpClient</code> directly for those.</p>\n<h2 id=\"api-adjustments-to-resource-and-rxresource\">API Adjustments to <code>resource</code> and <code>rxResource</code></h2>\n<p>The Resource API remains <em>experimental</em> in Angular 20.\nThis means the interface can still change without official prior notice.\nRecently, there have been two interesting adjustments.</p>\n<p>We have updated our comprehensive <a href=\"https://angular.schule/blog/2025-05-resource-api\">blog post on the Resource API</a> accordingly, so you will always find up-to-date examples there.</p>\n<h3 id=\"resource-params-instead-of-request\">resource: <code>params</code> instead of <code>request</code></h3>\n<p>Parameters for a resource are now passed via the <code>params</code> property, no longer via <code>request</code>.\nThe property in the <code>ResourceLoaderParams</code> interface, from which we read the parameters, is now also called <code>params</code>.</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-regexp\">//</span> ❌ BEFORE\nbooksResource = resource({\n  request: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> this.isbn(),\n  loader: <span class=\"hljs-function\"><span class=\"hljs-params\">({ request })</span> =&gt;</span> this.<span class=\"hljs-comment\">#bs.getSingle(request)</span>\n});\n\n<span class=\"hljs-regexp\">//</span> ✅ AFTER\nbooksResource = resource({\n  params: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> this.isbn(),\n  loader: <span class=\"hljs-function\"><span class=\"hljs-params\">({ params })</span> =&gt;</span> this.<span class=\"hljs-comment\">#bs.getSingle(params)</span>\n});\n</code></pre>\n<p>We welcome this change, as the terms &quot;request&quot; and &quot;loader&quot; could easily be confused before.\nWith the term &quot;params&quot;, it is now clearer that these are parameters that trigger the loader.</p>\n<h3 id=\"rxresource-stream-instead-of-loader\">rxResource: <code>stream</code> instead of <code>loader</code></h3>\n<p>The <code>rxResource</code> is a special variant of the Resource that uses an RxJS Observable as a loader (the simple Resource expects a Promise as a loader).\nAn Observable can deliver any number of elements, so the term &quot;loader&quot; does not always fit.\nTherefore, the property has been renamed to <code>stream</code>.</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-regexp\">//</span> ❌ VORHER\nbooksResource = rxResource({\n  loader: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> this.<span class=\"hljs-comment\">#bs.getAll()</span>\n});\n\n<span class=\"hljs-regexp\">//</span> ✅ NACHHER\nbooksResource = rxResource({\n  stream: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> this.<span class=\"hljs-comment\">#bs.getAll()</span>\n});\n</code></pre>\n<h2 id=\"miscellaneous\">Miscellaneous</h2>\n<p>You can always find all details about the updates in the changelogs for <a href=\"https://github.com/angular/angular/blob/main/CHANGELOG.md\">Angular</a> and the <a href=\"https://github.com/angular/angular-cli/blob/main/CHANGELOG.md\">Angular CLI</a>.\nWe&#39;ve compiled a few interesting highlights here:</p>\n<ul>\n<li><strong><code>provideServerRouting()</code> deprecated:</strong> The function <code>provideServerRouting()</code> is deprecated. Instead, use <code>provideServerRendering()</code> with the <code>withRoutes()</code> feature. (see <a href=\"https://github.com/angular/angular-cli/commit/33b9de3eb1fa596a4d5a975d05275739f2f7b8ae\">commit</a>)</li>\n<li><strong>Chrome DevTools:</strong> Integration of Angular into Chrome DevTools has significantly improved. The <em>Performance</em> tab now lets you analyze Angular&#39;s change detection and other performance parameters.</li>\n<li><strong>Official mascot:</strong> The Angular team wants to introduce an official mascot for the framework - and the community is invited to participate! Vote for your favorite or share your thoughts in the <a href=\"https://github.com/angular/angular/discussions/61733\">RFC on GitHub</a>.</li>\n</ul>\n<hr>\n\n\n<p>We wish you lots of fun developing with Angular 20!\nDo you have questions about the new version or about our book? Reach out to us!</p>\n<p><strong>Best wishes from\nFerdinand, Danny, and Johannes</strong></p>\n<hr>\n\n<p><small><strong>Cover photo:</strong> Morning mood at Anklamer Stadtbruch wetland. Photo by Ferdinand Malcher</small></p>\n","meta":{"title":"Angular 20 is here!","author":"Angular Book Team","mail":"team@angular-buch.com","published":"2025-05-30T00:00:00.000Z","lastModified":"2025-05-30T00:00:00.000Z","keywords":["Angular","Angular 20","Structural Directives","vitest","Component Suffix"],"language":"en","header":{"url":"angular20.jpg","width":2473,"height":1411}}}
