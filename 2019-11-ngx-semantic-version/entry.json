{"slug":"2019-11-ngx-semantic-version","html":"<p><strong>In this article I will introduce the new tool <code>ngx-semantic-version</code>.\nThis new Angular Schematic allows you to set up all necessary tooling for consistent git commit messages and publishing new versions.\nIt will help you to keep your <code>CHANGELOG.md</code> file up to date and to release new tagged versions. All this is done by leveraging great existing tools like <code>commitizen</code>, <code>commitlint</code> and <code>standard-version</code>.</strong></p>\n<hr>\n\n<p>Table of contents:</p>\n<ul>\n<li><a href=\"/blog/2019-11-ngx-semantic-version#tl-dr\">TL;DR</a></li>\n<li><a href=\"/blog/2019-11-ngx-semantic-version#introduction\">Introduction</a></li>\n<li><a href=\"/blog/2019-11-ngx-semantic-version#what\">What does it do?</a><ul>\n<li><a href=\"/blog/2019-11-ngx-semantic-version#commitlint\">commitlint: Enforcing conventional commit messages</a></li>\n<li><a href=\"/blog/2019-11-ngx-semantic-version#husky\">husky: Hook into the git lifecycle</a></li>\n<li><a href=\"/blog/2019-11-ngx-semantic-version#commitizen\">commitizen: Easily write conventional commit messages</a></li>\n<li><a href=\"/blog/2019-11-ngx-semantic-version#standard-version\">standard-version: Generate changelogs from the git history</a></li>\n</ul>\n</li>\n<li><a href=\"/blog/2019-11-ngx-semantic-version#how-to\">How to use ngx-semantic-version</a></li>\n<li><a href=\"/blog/2019-11-ngx-semantic-version#conclusion\">Conclusion</a></li>\n</ul>\n<h2 id=\"tldr\">TL;DR</h2>\n<p><em>ngx-semantic-version</em> is an Angular Schematic that will add and configure <em>commitlint</em>, <em>commitizen</em>, <em>husky</em> and <em>standard-version</em> to enforce commit messages in the <em>conventional commit</em> format and to automate your release and Changelog generation by respecting <em>semver</em>.\nAll you have to do for the setup is to execute this command in your Angular CLI project:</p>\n<pre><code class=\"language-bash\">ng <span class=\"hljs-built_in\">add</span> ngx-semantic-<span class=\"hljs-built_in\">version</span>\n</code></pre>\n<h2 id=\"introduction\">Introduction</h2>\n<p>Surviving in the stressful day-to-day life of a developer is not easy.\nOne feature follows the other, bug fixes and breaking changes come in on a regular basis.\nWith all the hustle and bustle, there&#39;s literally no time to write proper commit messages.</p>\n<p>If we don&#39;t take this job serious, at the end of the day our git history will look like this:</p>\n<pre><code class=\"language-text\"><span class=\"hljs-comment\">* 65f597a (HEAD -&gt; master) adjust readme</span>\n<span class=\"hljs-comment\">* f874d16 forgot to bump up version</span>\n<span class=\"hljs-comment\">* 3fa9f1e release</span>\n<span class=\"hljs-comment\">* d09e4ee now it&#x27;s fixed!</span>\n<span class=\"hljs-comment\">* 70c7a9b this should really fix the build</span>\n<span class=\"hljs-comment\">* 5f91dab let the build work (hopefully)</span>\n<span class=\"hljs-comment\">* 44c45b7 adds some file</span>\n<span class=\"hljs-comment\">* 7ac82d3 lots of stuff</span>\n<span class=\"hljs-comment\">* 1e34db6 initial commit</span>\n</code></pre>\n<p>When you see such a history you know almost nothing: neither what features have been integrated nor if there was a bugfix or a breaking change. There is almost no meaningful context.</p>\n<p>Wouldn&#39;t it be nice to have a cleaner git history that will follow a de facto standard which is commonly used?</p>\n<p>But more than this: having a clean and well-formatted git history can help us releasing new software versions respecting semantic versioning and generating a changelog that includes all the changes we made and references to the commits.</p>\n<p>No more struggle with forgotten version increasements in your <code>package.json</code>. No more manual changes in the <code>CHANGELOG.md</code> and missing references to necessary git commits. Wouldn&#39;t it be nice to automate the release process and generate the changelog and the package version by just checking and building it from a clean git history? And wouldn&#39;t it be nice to add all this stuff with one very simple single line command to your Angular project?</p>\n<p><strong><a href=\"https://www.npmjs.com/package/ngx-semantic-version\"><em>ngx-semantic-version</em></a> will give you all that.</strong></p>\n<h2 id=\"what-does-it-do-\">What does it do? <a name=\"what\"></a></h2>\n<p><em>ngx-semantic-version</em> will add and configure the following packages for you.\nWe will take a look at each tool in this article.</p>\n<ul>\n<li><strong><a href=\"https://commitlint.js.org\">commitlint</a>:</strong> check commit messages to follow the conventional commit pattern</li>\n<li><strong><a href=\"https://www.npmjs.com/package/husky\">husky</a>:</strong> hook into git events and run code at specific points (e.g. at commit or push)</li>\n<li><strong><a href=\"https://www.npmjs.com/package/commitizen\">commitizen</a>:</strong> helper for writing conventional commit messages</li>\n<li><strong><a href=\"https://www.npmjs.com/package/standard-version\">standard-version</a>:</strong> generate conventional changelogs from the git history</li>\n</ul>\n<h3 id=\"commitlint-enforcing-conventional-commit-messages-\">commitlint: Enforcing conventional commit messages <a name=\"commitlint\"></a></h3>\n<p><a href=\"https://commitlint.js.org\">Commitlint</a> will give you the ability to check your commit messages for a common pattern. A very prominent project following this pattern is the Angular repository itself. The <a href=\"https://www.conventionalcommits.org\"><em>conventional-commit</em></a> pattern requires us to follow this simple syntax:</p>\n<pre><code class=\"language-text\">&lt;<span class=\"hljs-keyword\">type</span>&gt;[<span class=\"hljs-keyword\">optional</span> scope]: &lt;description&gt;\n\n[<span class=\"hljs-keyword\">optional</span> body]\n\n[<span class=\"hljs-keyword\">optional</span> footer]\n</code></pre>\n<p>Let&#39;s see what is the meaning of these parameters:</p>\n<ul>\n<li><code>type</code> can be one of the following codes:<ul>\n<li><code>build</code></li>\n<li><code>ci</code></li>\n<li><code>chore</code></li>\n<li><code>docs</code></li>\n<li><code>feat</code></li>\n<li><code>fix</code></li>\n<li><code>perf</code></li>\n<li><code>refactor</code></li>\n<li><code>revert</code></li>\n<li><code>style</code></li>\n<li><code>test</code></li>\n</ul>\n</li>\n<li><code>scope</code> is optional and can be used to reference a specific part of your application, e.g. <code>fix(dashboard): add fallback for older browsers</code></li>\n<li>The <code>description</code> is mandatory and describes the commit in a very short form (also called <code>subject</code>)</li>\n<li>If necessary, a <code>body</code> and a <code>footer</code> with further information can be added which may contain:<ul>\n<li>The keyword <code>BREAKING CHANGES</code> followed by a description of the breaking changes</li>\n<li>A reference to a GitHub issue (or any other references, such as JIRA ticket number)</li>\n</ul>\n</li>\n</ul>\n<p>An example message could look like that:</p>\n<pre><code class=\"language-text\">refactor(footer): move footer widget <span class=\"hljs-keyword\">into</span> separate module\n\nBREAKING CHANGES\nThe footer widget needs <span class=\"hljs-keyword\">to</span> be imported <span class=\"hljs-keyword\">from</span> `widgets/FootWidgetModule` <span class=\"hljs-keyword\">instead of</span> `common` now.\n\ncloses <span class=\"hljs-comment\">#45</span>\n</code></pre>\n<p>Following this pattern allows us to extract valuable information from the git history later.\nWe can generate a well-formatted changelog file without any manual effort.\nIt can easily be determined what version part will be increased and much more.</p>\n<blockquote>\n<p>You may think now: &quot;Wow, that style looks complicated and hard to remember.&quot; But don&#39;t worry: you will get used to it soon! In a second you will see how creating these messages can be simplified using <em>commitizen</em>.</p>\n</blockquote>\n<p>If you want to try you <em>commitlint</em> separately, you can even try it out using <code>npx</code>:</p>\n<p><img src=\"https://angular-schule.github.io/website-articles/2019-11-ngx-semantic-version/commitlint.svg\" alt=\"commitlint cli\"></p>\n<p><em>ngx-semantic-version</em> will add the configuration file <code>commitlint.config.js</code> which can be adjusted later by your personal needs.</p>\n<h3 id=\"husky-hook-into-the-git-lifecycle-\">husky: Hook into the git lifecycle <a name=\"husky\"></a></h3>\n<p><a href=\"https://www.npmjs.com/package/husky\">Husky</a> allows us to hook into the git lifecycle using Node.js.\nWe can use husky in combination with <em>commitlint</em> to check a commit message right before actually commiting it.\nThis is what <em>ngx-semantic-version</em> configures in our application.\nIt will add this part to your <code>package.json</code>:</p>\n<pre><code class=\"language-json\">...\n<span class=\"hljs-string\">&quot;husky&quot;</span>: {\n  <span class=\"hljs-string\">&quot;hooks&quot;</span>: {\n    <span class=\"hljs-string\">&quot;commit-msg&quot;</span>: <span class=\"hljs-string\">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span>\n  }\n},\n</code></pre>\n<p>Husky uses the environment variable <code>HUSKY_GIT_PARAMS</code> containing the current git message you entered and it will pass this through <em>commitlint</em> so it can be evaluated.</p>\n<p>Whenever you commit, <em>commitlint</em> will now automatically check your message. </p>\n<h3 id=\"commitizen-easily-write-conventional-commit-messages-\">commitizen: Easily write conventional commit messages <a name=\"commitizen\"></a></h3>\n<p>Defining a well-formed message text can be quite hard when you are not used to the <em>conventional-changelog</em> style.\nThe tool <em>commitizen</em> is there to help beginners and to prevent your own negligence.\nIt introduces a lots of restrictions for our commit messages so that it&#39;s easier for developers to follow the pattern.\n<a href=\"https://www.npmjs.com/package/commitizen\">Commitizen</a> will help you to always define a commit message in the appropriate format using an interactive CLI:</p>\n<p><img src=\"https://angular-schule.github.io/website-articles/2019-11-ngx-semantic-version/commitizen.svg\" alt=\"commitizen cli\"></p>\n<p>When adding <em>ngx-semantic-version</em> it will configure <em>commitizen</em> to use the <em>conventional changelog</em> style as well:</p>\n<pre><code class=\"language-json\"><span class=\"hljs-string\">//</span> package.json\n<span class=\"hljs-string\">...</span>\n<span class=\"hljs-string\">&quot;config&quot;</span>: {\n  <span class=\"hljs-string\">&quot;commitizen&quot;</span>: {\n    <span class=\"hljs-string\">&quot;path&quot;</span>: <span class=\"hljs-string\">&quot;./node_modules/cz-conventional-changelog&quot;</span>\n  }\n}\n</code></pre>\n<p>If you are using Visual Studio Code, you can also use the extension <a href=\"https://marketplace.visualstudio.com/items?itemName=KnisterPeter.vscode-commitizen\">Visual Studio Code Commitizen Support</a> which will let you type the commit message directly in the editor:</p>\n<p><img src=\"https://angular-schule.github.io/website-articles/2019-11-ngx-semantic-version/commitizen-vscode.gif\" alt=\"commitizen vscode plugin\"></p>\n<h3 id=\"standard-version-generate-changelogs-from-the-git-history-\">standard-version: Generate changelogs from the git history <a name=\"standard-version\"></a></h3>\n<p><a href=\"https://www.npmjs.com/package/standard-version\">Standard-version</a> is the cherry on the cake and takes advantage of a well-formed git history.\nIt will extract the commit message information like <code>fix</code>, <code>feature</code> and <code>BREAKING CHANGES</code> and use this information to automatically create a <code>CHANGELOG.md</code> file.\nThe tool will also determine the next version number for the project, according to the <a href=\"https://semver.org/\">rules of semantic versioning</a>.</p>\n<p><em>ngx-semantic-version</em> will configure a new script in your <code>package.json</code> that can be used for releasing a new version:</p>\n<pre><code class=\"language-json\">...\n<span class=\"hljs-string\">&quot;scripts&quot;</span>: {\n  <span class=\"hljs-string\">&quot;release&quot;</span>: <span class=\"hljs-string\">&quot;standard-version&quot;</span>,\n},\n</code></pre>\n<p>Whenever you want to release a version, you should use <em>standard-version</em> to keep your versioning clean and the <code>CHANGELOG.md</code> up-to-date.\nFurthermore, it references both commits and closed issues in your <code>CHANGELOG.md</code>, so that it&#39;s easier to understand what is part of in the release.\nThe tool will also tag the version in the git repo so that all versions will be available as releases via GitHub, Gitlab or whatever you are using.</p>\n<h2 id=\"how-to-use-ngx-semantic-version-\">How to use <em>ngx-semantic-version</em> <a name=\"how-to\"></a></h2>\n<p>Are you excited, too? Then let&#39;s get started!\nConfiguring all mentioned tools manually can be quite tedious.\nHere is where <em>ngx-semantic-version</em> enters the game: It is an Angular schematic that will add and configure all the tools for you.</p>\n<p>All we need it to run the following command:</p>\n<pre><code class=\"language-bash\">ng <span class=\"hljs-built_in\">add</span> ngx-semantic-<span class=\"hljs-built_in\">version</span>\n</code></pre>\n<p>After installation, your <code>package.json</code> file will be updated.\nYou will also find a new file <code>commitlint.config.js</code> which includes the basic rule set for conventional commits.\nYou can <a href=\"https://commitlint.js.org/#/reference-rules\">adjust the configuration</a> to satisfy your needs even more.</p>\n<p>Try it out and make some changes to your project!\nCommitlint will now check the commit message and tell you if it is valid or not.\nIt prevents you from commiting with a &quot;bad&quot; message.\nTo make things easier, <em>commitizen</em> will support you by building the message in the right format and it even explicitly asks you for issue references and breaking changes.</p>\n<p>If you typically use <code>npm version</code> to cut a new release, now you do this instead:</p>\n<pre><code class=\"language-bash\">npm run release\n</code></pre>\n<p>You should also consider using one of the following commands:</p>\n<pre><code class=\"language-bash\">npm <span class=\"hljs-built_in\">run</span> release <span class=\"hljs-comment\">-- --first-release  # create the initial release and create the `CHANGELOG.md`</span>\nnpm <span class=\"hljs-built_in\">run</span> release <span class=\"hljs-comment\">-- --prerelease     # create a pre-release instead of a regular one</span>\n</code></pre>\n<p><em>standard-version</em> will now do the following:</p>\n<ol>\n<li>&quot;Bump&quot; the version in <code>package.json</code></li>\n<li>Update the <code>CHANGELOG.md</code> file</li>\n<li>Commit the <code>package.json</code> and <code>CHANGELOG.md</code> files</li>\n<li>Tag a new release in the git history</li>\n</ol>\n<p>Check out the <a href=\"https://www.npmjs.com/package/standard-version#release-as-a-pre-release\">official documentation of <em>standard-version</em></a> for further information.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>I hope that <code>ngx-semantic-version</code> will make your daily work easier!\nIf you have a problem, please feel free to open an <a href=\"https://github.com/d-koppenhagen/ngx-semantic-version/issues\">issue</a>.\nAnd if you have any improvements, I&#39;m particularly happy about a <a href=\"https://github.com/d-koppenhagen/ngx-semantic-version/pulls\">pull request</a>.</p>\n<p><strong>Happy coding, committing and releasing!</strong></p>\n<hr>\n\n<h2 id=\"thank-you\">Thank you</h2>\n<p>Special thanks go to <a href=\"https://twitter.com/fmalcher01\">Ferdinand Malcher</a> and <a href=\"https://twitter.com/johanneshoppe\">Johannes Hoppe</a> for revising this article and discussing things.</p>\n","meta":{"title":"ngx-semantic-version: enhance your git and release workflow","author":"Danny Koppenhagen","mail":"mail@d-koppenhagen.de","published":"2019-11-06T00:00:00.000Z","keywords":["Angular","Angular CLI","Angular Schematics","release","commit","commitlint","husky","commitizen","standard-version","semver","Semantic Version","Conventional Commits","Conventional Changelog"],"language":"en","thumbnail":"https://angular-schule.github.io/website-articles/2019-11-ngx-semantic-version/ngx-semantic-version-header.jpg"}}
