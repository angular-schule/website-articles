{"slug":"2025-06-openapi-generator","html":"<p><strong>In this article, we&#39;ll show how to use OpenAPI Generator to automatically generate Angular HTTP services from your OpenAPI spec.</strong></p>\n<hr>\n\n<h2 id=\"why-you-need-a-code-generator-for-your-angular-api-clients\">Why you need a code generator for your Angular API clients</h2>\n<p>Every Angular project that talks to a backend faces the same repetitive pain: writing boilerplate code to interact with REST endpoints. \nHTTP clients, models, DTOs, error handling, and keeping everything in sync when the API changes - it adds up fast and slows teams down.</p>\n<p>Wouldn&#39;t it be great if all of that could be automated?</p>\n<p>That&#39;s exactly what <strong>API code generators</strong> do. \nThey take your OpenAPI specification and generate fully-typed, ready-to-use client code: consistently, reliably, and within seconds. \nNo more hand-written HTTP services. \nNo more copy-pasting types. \nNo more drift between frontend and backend.</p>\n<p>A few years ago, I wrote a popular article on <a href=\"/blog/2018-04-swagger-codegen\">using Swagger Codegen to generate Angular clients</a>. \nSince then, the ecosystem has moved forward: <strong>OpenAPI Generator</strong> emerged as the actively maintained, community-driven successor to Swagger Codegen. \nIt&#39;s more powerful, better supported, and trusted by companies and open-source projects around the world.</p>\n<blockquote>\n<p>üëâ In this revamped article, I&#39;ll show you how easy it is to generate a complete API client using OpenAPI Generator - and how to integrate it seamlessly into your Angular project.</p>\n</blockquote>\n<h2 id=\"what-you-need\">What you need</h2>\n<ul>\n<li>A valid OpenAPI 2.0 or 3.x spec file (JSON/YAML) that describes your REST backend.</li>\n<li>Java 11+ or Docker installed (if you prefer not to install Java directly)</li>\n</ul>\n<h2 id=\"installation-use-the-cli-wrapper-for-consistent-builds\">Installation: Use the CLI wrapper for consistent builds</h2>\n<p>Theoretically, you could download the latest version of the code generator manually: \njust grab the <code>openapi-generator-cli.jar</code> from <a href=\"https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/\">Maven Central</a>.</p>\n<p>But in practice, I <strong>highly recommend</strong> using the official Node.js-based CLI wrapper instead.</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">npm</span> install @openapitools/openapi-generator-cli --save-dev\n</code></pre>\n<p>This small package gives you a simple command-line tool: <code>openapi-generator-cli</code>.\nOnce installed, you can execute it via <code>npx openapi-generator-cli</code>.\nIt gives you the look and feel of all the other Node.js-based tooling you&#39;re already familiar with.</p>\n<p>But more importantly, it installs a <strong>specific version</strong> of the generator and writes that information into the file <code>openapitools.json</code> inside your project.</p>\n<p>Now, when you check your project into Git (including the file <code>openapitools.json</code>), your teammates (or the CI pipeline) will automatically use <strong>the exact same version</strong> when they run the CLI.</p>\n<ul>\n<li>This ensures <strong>100% reproducible code generation</strong> across your entire team.</li>\n<li>No &quot;works on my machine&quot; issues due to different generator versions.</li>\n<li>No unexpected diffs caused by subtle changes in templates or behavior.</li>\n</ul>\n<p>That&#39;s exactly what we want for a clean and reliable workflow.</p>\n<h3 id=\"switching-code-generator-versions\">Switching Code Generator Versions</h3>\n<p>To ensure consistent output across your team and avoid accidental diffs, it&#39;s a good idea to lock your project to a specific version of the OpenAPI Generator.\nSuppose you want to lock your project to version <code>7.13.0</code>. \nYou can do this by running:</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-attribute\">npx</span> openapi-generator-cli version-manager set <span class=\"hljs-number\">7</span>.<span class=\"hljs-number\">13</span>.<span class=\"hljs-number\">0</span>\n</code></pre>\n<p>This will:</p>\n<ol>\n<li>Download the <code>openapi-generator-cli-7.13.0.jar</code> file into your <code>node_modules</code> folder ‚Äì so it shouldn&#39;t be under version control, since typically the local NPM files are never checked in.</li>\n<li>Record the version into the <code>openapitools.json</code> file.</li>\n</ol>\n<p>To verify which version is currently active, run:</p>\n<pre><code class=\"language-bash\">npx openapi-generator-<span class=\"hljs-keyword\">cli</span> <span class=\"hljs-keyword\">version</span>\n</code></pre>\n<p>This ensures that every team member uses exactly the same code generator version, even if newer versions are released later.\nYou can also use this mechanism to test new versions or roll back safely.</p>\n<h2 id=\"generating-your-first-angular-api-client\">Generating Your First Angular API Client</h2>\n<p>Before we take a look at the code, take a moment to explore <a href=\"api6.angular-buch.com\">https://api6.angular-buch.com/</a>.</p>\n<p>This public REST API is part of the <strong>BookMonkey 6</strong> demo application, the updated companion project for the upcoming <strong>5th edition</strong> of our German Angular book.</p>\n<blockquote>\n<p>üìò Save the date!\nThe new edition is scheduled for <strong>early 2026</strong>.\nFollow us on <a href=\"https://www.angular.schule/\">angular.schule</a> and our social media channels for updates!</p>\n</blockquote>\n<p>To explore the API definition, simply open:</p>\n<p>‚Üí <a href=\"https://api6.angular-buch.com/swagger-ui/\">OpenAPI Spec Viewer (Swagger UI)</a></p>\n<p>This graphical interface is fully generated from the OpenAPI specification, located at:</p>\n<p>‚Üí <code>https://api6.angular-buch.com/openapi.json</code></p>\n<p>If this metadata is rich enough to render a complete admin UI, then it&#39;s clearly powerful enough to generate a fully functional Angular API client.</p>\n<h3 id=\"generate-an-angular-client-in-one-line\">Generate an Angular Client in One Line</h3>\n<p>We start with the most minimal setup:</p>\n<pre><code class=\"language-bash\">npx openapi-generator-cli <span class=\"hljs-keyword\">generate</span> \\\n  -i https:<span class=\"hljs-comment\">//api6.angular-buch.com/openapi.json \\</span>\n  -g typescript-angular \\\n  -o ./src/app/shared/book-monkey-api\n</code></pre>\n<p><strong>Hint:</strong> üí° On Windows (Command Prompt), remove the backslashes and write the command in a single line.</p>\n<p>The following table explains each argument in detail:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>npx openapi-generator-cli</code></td>\n<td>Runs the OpenAPI Generator CLI (no global install needed)</td>\n</tr>\n<tr>\n<td><code>generate</code></td>\n<td>The command to run: generate code</td>\n</tr>\n<tr>\n<td><code>-i</code></td>\n<td>The URL or file path to the OpenAPI specification</td>\n</tr>\n<tr>\n<td><code>-g</code></td>\n<td>The generator to use (here: <code>typescript-angular</code>)</td>\n</tr>\n<tr>\n<td><code>-o</code></td>\n<td>The output directory for the generated code</td>\n</tr>\n</tbody></table>\n<p>These are the bare minimum arguments required.\nWith this, you&#39;ll get:</p>\n<ul>\n<li>Typed Angular services for each REST resource</li>\n<li>A full NgModule (<code>ApiModule</code>)</li>\n<li>Models for all schemas (for example <code>book</code>, <code>author</code>, etc...)</li>\n<li><code>HttpClient</code>-based methods for every endpoint</li>\n</ul>\n<blockquote>\n<p>üõ†Ô∏è Pro Tip: Place the output directory somewhere inside your app&#39;s structure, but outside of actual components or routing. We suggest a path like <code>src/app/shared/book-monkey-api/</code>.</p>\n</blockquote>\n<p>The CLI supports many more options.\nTo see all available configuration options for the <code>typescript-angular</code> generator, use the following command.</p>\n<pre><code class=\"language-bash\">npx openapi-generator-<span class=\"hljs-keyword\">cli</span> config-<span class=\"hljs-keyword\">help</span> -<span class=\"hljs-keyword\">g</span> typescript-angular\n</code></pre>\n<p>This gives you a full list of tweakable settings ‚Äì from service naming patterns to enum handling and many more.</p>\n<h2 id=\"set-up-the-generated-code\">Set Up the Generated Code</h2>\n<p>To integrate the generated API client into your Angular application, register it using <code>provideApi()</code> inside your <code>app.config.ts</code>.</p>\n<p>This setup is fully compatible with Angular&#39;s standalone application structure:</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-comment\">// app.config.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ApplicationConfig</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { provideHttpClient } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/common/http&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { provideApi } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./shared/book-monkey-api&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">appConfig</span>: <span class=\"hljs-title class_\">ApplicationConfig</span> = {\n  <span class=\"hljs-attr\">providers</span>: [\n    <span class=\"hljs-comment\">// [...]</span>\n    <span class=\"hljs-title function_\">provideHttpClient</span>(),\n    <span class=\"hljs-title function_\">provideApi</span>()\n  ]\n};\n</code></pre>\n<p>Don&#39;t forget to include <code>provideHttpClient()</code> to register Angular&#39;s <code>HttpClient</code> for injection.\nThis is required, because the generated client uses <code>HttpClient</code> internally for every request.</p>\n<blockquote>\n<p><strong>IMPORTANT:</strong> The <code>provideApi()</code> function is currently available only in the latest snapshot builds of OpenAPI Generator. \n  It will become officially available with version <strong>7.14.0</strong>.</p>\n</blockquote>\n<!-- merken: https://raw.githubusercontent.com/jase88/openapi-generator/907ac1297454541107bc5e02442567eae3adee2b/modules/openapi-generator/src/main/resources/typescript-angular/README.mustache -->\n\n\n<h3 id=\"custom-base-path\">Custom Base Path</h3>\n<p>If your API lives under a different domain or base path, you can pass a custom string.\nThis is very helpful if you have different domains or paths for different development stages.</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-function\"><span class=\"hljs-title\">provideApi</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&#x27;https://api6.angular-buch.com&#x27;</span>)</span></span>\n</code></pre>\n<h3 id=\"full-configuration\">Full Configuration</h3>\n<p>You can also pass a full configuration object to set credentials or headers:</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-title function_ invoke__\">provideApi</span>({\n  <span class=\"hljs-attr\">withCredentials</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">&#x27;admin&#x27;</span>,\n  <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&#x27;secret&#x27;</span>\n})\n</code></pre>\n<h3 id=\"dynamic-configuration-via-factory\">Dynamic Configuration (via Factory)</h3>\n<p>For dynamic configuration (e.g. based on an injected service), use Angular&#39;s <code>useFactory</code> syntax:</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { provideApi, Configuration } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./shared/book-monkey-api&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(),\n    {\n      provide: Configuration,\n      useFactory: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n        const authService = inject(AuthService);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Configuration({\n          basePath: <span class=\"hljs-string\">&#x27;https://api6.angular-buch.com&#x27;</span>,\n          username: authService.getUsername(),\n          password: authService.getPassword()\n        });\n      }\n    }\n  ]\n};\n</code></pre>\n<p>In this example, <code>AuthService</code> is a custom service that you need to implement yourself. \nIt provides dynamic values like username and password (or tokens) at runtime.\nYou can tailor it to your authentication needs: for example, it could return credentials from local storage or a login flow.</p>\n<p>Alternatively, you can skip the configuration options entirely and use Angular HTTP interceptors to inject headers or handle authentication globally.\nHowever, that approach is outside the scope of this article.</p>\n<h3 id=\"legacy-fallback-still-using-ngmodules\">Legacy Fallback: Still Using NgModules?</h3>\n<p>If your project hasn&#39;t migrated to standalone yet, you can still use the traditional approach by importing the generated <code>ApiModule</code>:</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { ApiModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./shared/book-monkey-api&#x27;</span>;\n\n@NgModule({\n  imports: [ApiModule.forRoot(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> Configuration())]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> {}\n</code></pre>\n<p>That said, we highly recommend switching to <code>provideApi()</code> for all modern Angular projects.</p>\n<h3 id=\"using-the-stable-api-until-the-next-release\">Using the stable API until the next release</h3>\n<p>If you feel uncomfortable relying on a snapshot version, you can use the current stable API until version <code>7.14.0</code> is released.\nThe function <code>importProvidersFrom()</code> extracts providers from an NgModule declaration so that we can pass them into our <code>providers</code> array.</p>\n<pre><code class=\"language-ts\">providers: [\n  <span class=\"hljs-built_in\">importProvidersFrom</span>(\n    ApiModule.<span class=\"hljs-built_in\">forRoot</span>(() =&gt;\n      new <span class=\"hljs-built_in\">Configuration</span>({\n        basePath: <span class=\"hljs-string\">&#x27;https://api6.angular-buch.com&#x27;</span> \n      })\n    )\n  ),\n  // ...\n]\n</code></pre>\n<p>This approach works reliably and only requires a one-time configuration in your <code>app.config.ts</code>.\nIt can easily be replaced later on by <code>provideApi()</code>.</p>\n<h2 id=\"integrating-the-generated-service-in-your-component\">Integrating the generated service in your component</h2>\n<p>Once the API client is generated and configured, you can directly inject and use the provided services.\nHere&#39;s a minimal example:</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { JsonPipe } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/common&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Component, inject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { toSignal } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core/rxjs-interop&#x27;</span>;\n\n<span class=\"hljs-keyword\">import</span> { BooksService } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./shared/book-monkey-api&#x27;</span>;\n\n@Component({\n  selector: <span class=\"hljs-string\">&#x27;app-root&#x27;</span>,\n  imports: [JsonPipe],\n  template: `<span class=\"language-javascript\">&lt;pre&gt;{{ <span class=\"hljs-title function_\">books</span>() | json }}&lt;/pre&gt;</span>`\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> {\n\n  <span class=\"hljs-comment\">#booksService = inject(BooksService);</span>\n  readonly books = toSignal(this.<span class=\"hljs-comment\">#booksService.booksGet())</span>\n}\n</code></pre>\n<p>This works out of the box because our prepared OpenAPI spec defines a <code>tag</code> named <code>books</code>.\nThe code generator automatically creates a <code>BooksService</code> for that group of endpoints.\nA well-crafted and thoughtfully named OpenAPI spec is worth the effort: \nThe more care you put into naming resources, operations, and tags, the better the generated service and method names will be. \nThis investment pays off with clean, predictable, and developer-friendly TypeScript code that feels natural to use throughout your application.</p>\n<p>In addition to services, the generator also provides all related models with full TypeScript typing.\nIn this example, the method <code>booksGet()</code> returns an <code>Observable&lt;Book[]&gt;</code>, using the interface <code>Book</code> that was also generated.</p>\n<p>To fit modern Angular best practices, we use <code>toSignal()</code> to turn the Observable into a signal.\nThis modern pattern keeps your components fully reactive and simplifies state handling without a manual <code>subscribe()</code> call or the <code>async</code> pipe.</p>\n<h2 id=\"modern-data-loading-with-rxresource\">Modern Data Loading with <code>rxResource()</code></h2>\n<p>Angular 19 introduced a new reactive primitive: <code>rxResource()</code> (still marked as <em>experimental</em> as of Angular 20).\nIt&#39;s designed to simplify the way we work with asynchronous data streams, especially when fetching data from an API.</p>\n<p>Instead of manual subscription handling or conversion to signals (via <code>toSignal()</code> for example), <code>rxResource()</code> wraps our observable-based data source into a signal-friendly API.\nIt automatically manages loading states, errors, and the latest value.\nAll this state is exposed as dedicated reactive signals.</p>\n<p>This makes it a perfect companion for services generated with OpenAPI Generator.\nHere&#39;s how we can use the generated <code>BooksService</code> together with the new <code>rxResource()</code>:</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { JsonPipe } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/common&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Component, inject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { rxResource } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core/rxjs-interop&#x27;</span>;\n\n<span class=\"hljs-keyword\">import</span> { BooksService } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./shared/book-monkey-api&#x27;</span>;\n\n@Component({\n  selector: <span class=\"hljs-string\">&#x27;app-root&#x27;</span>,\n  standalone: <span class=\"hljs-literal\">true</span>,\n  imports: [JsonPipe],\n  template: `<span class=\"language-javascript\">&lt;pre&gt;{{ booksResource.<span class=\"hljs-title function_\">value</span>() | json }}&lt;/pre&gt;</span>`\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> {\n\n  <span class=\"hljs-comment\">#booksService = inject(BooksService);</span>\n\n  readonly booksResource = rxResource({\n    stream: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> this.<span class=\"hljs-comment\">#booksService.booksGet()</span>\n  });\n}\n</code></pre>\n<p>The <code>rxResource()</code> primitive comes with several useful properties, all of which are Signals:</p>\n<ul>\n<li><strong><code>value()</code></strong>: Returns the current data (or <code>undefined</code> if not yet available).</li>\n<li><strong><code>isLoading()</code></strong>: Returns <code>true</code> while the request is in-flight.</li>\n<li><strong><code>error()</code></strong>: Contains an <code>Error</code> object if the call failed, otherwise <code>null</code>.</li>\n</ul>\n<p>This makes it very easy to build reactive apps:</p>\n<pre><code class=\"language-html\"><span class=\"language-xml\">@if (booksResource.error()) {\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>‚ùå Failed to load books.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n}\n@else if (booksResource.isLoading()) {\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>‚è≥ Loading books...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n}\n@else {\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pre</span>&gt;</span></span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">booksResource.value</span>() | json }}</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pre</span>&gt;</span>\n}</span>\n</code></pre>\n<p>This pattern results in highly declarative and clean code, perfectly aligned with Angular&#39;s new Signal-based approach.\n<strong>Learn more about the resource API in our dedicated article:\n<a href=\"/blog/2025-05-resource-api\">Reactive Angular: Loading Data with the Resource API</a>.</strong></p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Congratulations! üéâ</p>\n<p>You can now generate fully-typed Angular API clients with ease.\nReady to drop into any modern application.\nNo more manual wiring of HTTP calls. \nNo more syncing models by hand. \nNo more guesswork.</p>\n<p>You&#39;ve seen how to:</p>\n<ul>\n<li>install and lock the OpenAPI Generator for consistent output</li>\n<li>generate TypeScript code directly from your OpenAPI spec,</li>\n<li>set up the application using the new <code>provideApi()</code> syntax,</li>\n<li>and consume your API with powerful Angular features like <code>toSignal()</code> and <code>rxResource()</code>.</li>\n</ul>\n<p>With this setup, your API becomes a living contract, which automatically produces the client-side code you need.</p>\n<p>Now go build something awesome. üöÄ</p>\n<hr>\n\n<p><small>Many thanks to Ferdinand Malcher for review and feedback.</small></p>\n<p><small><strong>Cover image:</strong> Official logo of the OpenAPI generator, with custom square patterns by Johannes</small></p>\n<h2 id=\"related-articles\">Related Articles</h2>\n<ul>\n<li>2018-04-12 - <a href=\"/blog/2018-04-swagger-codegen\">Generating Angular API clients with Swagger</a></li>\n<li>2018-06-08 - <a href=\"/blog/2018-06-swagger-codegen-is-now-openapi-generator\">Swagger Codegen is now OpenAPI Generator</a></li>\n<li>2018-06-10 - <a href=\"/blog/2018-06-apollo-graphql-code-generator\">Generating Angular API clients with Apollo and GraphQL code generator</a></li>\n</ul>\n","meta":{"title":"Generating Angular API clients with OpenAPI Generator","author":"Johannes Hoppe","mail":"johannes.hoppe@haushoppe-its.de","published":"2025-06-18T00:00:00.000Z","keywords":["OpenAPI","OpenAPI Generator","Swagger","swagger-codegen","openapi-generator","Codegen","TypeScript","Angular"],"language":"en","header":{"url":"logo_header.png","width":1500,"height":500}}}
